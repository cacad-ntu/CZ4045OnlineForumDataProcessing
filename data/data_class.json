[
    {
        "pos": "Is there an existing application or library in Java which will allow me to convert a CSV data file to XML file?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The XML tags would be provided through possibly the first row containing column headings.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This may be too basic or limited of a solution, but couldn't you do a String.split() on each line of the file, remembering the result array of the first line to generate the XML, and just spit each line's array data out with the proper XML elements padding each iteration of a loop?\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Maybe this might help: JSefa\nYou can read CSV file with this tool and serialize it to XML.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't understand why you would want to do this.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "It sounds almost like cargo cult coding.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Converting a CSV file to XML doesn't add any value.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Your program is already reading the CSV file, so arguing that you need XML doesn't work.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "On the other hand, reading the CSV file, doing something with the values, and then serializing to XML does make sense (well, as much as using XML can make sense... ;)) but you would supposedly already have a means of serializing to XML.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "As far as I know, there's no ready-made library to do this for you, but producing a tool capable of translating from CSV to XML should only require you to write a crude CSV parser and hook up JDOM (or your XML Java library of choice) with some glue code.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There is nothing I know of that can do this without you at least writing a little bit of code... You will need 2 separate library:\n\nA CSV Parser Framework \nAn XML Serialization Framework\n\nThe CSV parser I would recommend (unless you want to have a little bit of fun to write your own CSV Parser) is OpenCSV (A SourceForge Project for parsing CSV Data)\nThe XML Serialization Framework should be something that can scale in case you want to transform large (or huge) CSV file to XML: My recommendation is the Sun Java Streaming XML Parser Framework (See here) which allows pull-parsing AND serialization.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I know you asked for Java, but this strikes me as a task well suited to a scripting language.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here is a quick (very simple) solution written in Groovy.test.csv\n\ncsvtoxml.groovy\n\nWrites the following XML to stdout:\n\nHowever, the code does very simple parsing (not taking into account quoted or escaped commas) and it does not account for possible absent data.\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This solution does not need any CSV or XML libraries and, I know, it does not handle any illegal characters and encoding issues, but you might be interested in it as well, provided your CSV input does not break the above mentioned rules.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "Attention: You should not use this code unless you know what you do or don't have the chance to use a further library (possible in some bureaucratic projects)... Use a StringBuffer for older Runtime Environments...\nSo here we go:\n\nThe input test.csv (stolen from another answer on this page):\n\nThe resulting output:\n\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "As the others above, I don't know any one-step way to do that, but if you are ready to use very simple external libraries, I would suggest:\nOpenCsv for parsing CSV (small, simple, reliable and easy to use)\nXstream to parse/serialize XML (very very easy to use, and creating fully human readable xml)\nUsing the same sample data as above, code would look like:\n\nProducing the following result:\n(Xstream allows very fine tuning of the result...)\n\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For the CSV Part, you may use my little open source library\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have an opensource framework for working with CSV and flat files in general. Maybe it's worth looking: JFileHelpers.\nWith that toolkit you can write code using beans, like:\n\nand then just parse your text files using:\n\nAnd you'll have a collection of parsed objects.\nHope that helps!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There is also good library ServingXML by Daniel Parker, which is able to convert almost any plain text format to XML and back.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The example for your case can be found here: It uses heading of field in CSV file as the XML element name.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can do this exceptionally easily using Groovy, and the code is very readable.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Basically, the text variable will be written to contacts.xml for each line in the contactData.csv, and the fields array contains each column.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You could use XSLT.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Google it and you will find a few examples e.g. CSV to XML\nIf you use XSLT you can then convert the XML to whatever format you want.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the \"purist\" or \"correct\" way to access an object's properties from within an object method that is not a getter/setter method?\nI know that from outside of the object you should use a getter/setter, but from within would you just do:\nJava:\n\nPHP:\n\nor would you do:\nJava:\n\nPHP:\n\nForgive me if my Java is a little off, it's been a year since I programmed in Java...",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "\nEDIT:\nIt seems people are assuming I am talking about private or protected variables/properties only.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "When I learned OO I was taught to use getters/setters for every single property even if it was public (and actually I was told never to make any variable/property public).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, I may be starting off from a false assumption from the get go.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It appears that people answering this question are maybe saying that you should have public properties and that those don't need getters and setters, which goes against what I was taught, and what I was talking about, although maybe that needs to be discussed as well.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That's probably a good topic for a different question though...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "This has religious war potential, but it seems to me that if you're using a getter/setter, you should use it internally as well - using both will lead to maintenance problems down the road",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(e.g. somebody adds code to a setter that needs to run every time that property is set, and the property is being set internally w/o that setter being called).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It depends on how the property is used. For example, say you have a student object that has a name property. You could use your Get method to pull the name from the database, if it hasn't been retrieved already.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This way you are reducing unnecessary calls to the database.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Now let's say you have a private integer counter in your object that counts the number of times the name has been called.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You may want to not use the Get method from inside the object because it would produce an invalid count.\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "\nAm I just going overboard here?\n\nPerhaps ;",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another approach would be to utilize a private/protected method to actually do the getting (caching/db/etc), and a public wrapper for it that increments the count:\nPHP:\n\nand then from within the object itself:\nPHP:\n\nThis way you can still use that first argument for something else (like sending a flag for whether or not to used cached data here perhaps).\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "you HAVE to set the property using the (possibly private) property setter.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
       {
        "pos": "I personally only use the private member-behind when not doing so would cause the object to fall in an less than desirable state, such as when initializing or when caching/lazy loading is involved.\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "Well, it seems with C# 3.0 properties' default implementation, the decision is taken for you;",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "As stated in some of the comments: Sometimes you should, sometimes you shouldn't.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The great part about private variables is that you are able to see all the places they are used when you change something.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "If your getter/setter does something you need, use it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If it doesn't matter you decide.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The opposite case could be made that if you use the getter/setter and somebody changes the getter/setter they have to analyze all the places the getter and setter is used internally to see if it messes something up.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Personally, I feel like it's important to remain consistent.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "If you have getters and setters, use them.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The only time I would access a field directly is when the accessor has a lot of overhead.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It may feel like you're bloating your code unnecessarily, but it can certainly save a whole lot of headache in the future.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The classic example:\nLater on, you may desire to change the way that field works.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Maybe it should be calculated on-the-fly or maybe you would like to use a different type for the backing store.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you are accessing properties directly, a change like that can break an awful lot of code in one swell foop.\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "i can be wrong because i'm autodidact, but i NEVER user public properties in my Java clases, they are allways private or protected, so that outside code must access by getters/setters.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "it's better for mainteance / modification purposes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "And for inside class code... if getter method is trivial i use the property directly, but i allways use the setter methods because i could easily add code to fire events if i wish\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "i've found using setters/getters made my code easier to read.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I also like the control it gives when other classes use the methods and if i change the data the property will store.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Private fields with public or protected properties.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Access to the values should go through the properties, and be copied to a local variable if they will be used more than once in a method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": ".NET developers can use automatic properties to enforce this since you can't even see the backing variables at design time.\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "If and ONLY if you have the rest of your application so totally tweaked, rocked out, and otherwise optimized to where accessing values by going through their assosciated properties has become a bottleneck (And that will never EVER happen, I guarantee) should you even begin to consider letting anything other than the properties touch their backing variables directly.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If by \"purist\" you mean \"most encapsulation\", then I typically declare all my fields as private and then use this.field from within the class itself, but all other classes, including subclasses, access instance state using the getters.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I won't edit the property I'll use a get_property() public method unless it's a special occasion such as a MySQLi object inside another object in which case I'll just public the property and refer to it as $obj->object_property.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Inside the object it's always $this->property for me.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I like the answer by cmcculloh, but it seems like the most correct is the answer by Greg Hurlman.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Use getter/setters all the time if you started using them from the getgo and/or are used to working with them.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As an aside, I personally find that using getter/setters makes the code easier to read and to debug later on.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I'm fairly surprised at how unanimous the sentiment is that getters and setters are fine and good.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I suggest the incendiary article by Allen Holub \"Getters And Setters Are Evil\". Granted, the title is for shock value, but the author makes valid points.\nEssentially, if you have getters and setters for each and every private field, you are making those fields as good as public. You'd be very hard-pressed to change the type of a private field without ripple effects to every class that calls that getter.\nMoreover, from a strictly OO point of view, objects should be responding to messages (methods) that correspond to their (hopefully) single responsibility. The vast majority of getters and setters don't make sense for their constituent objects;Pen.dispenseInkOnto(Surface) makes more sense to me than Pen.getColor().\nGetters and setters also encourage users of the class to ask the object for some data, perform a calculation, and then set some other value in the object, better known as procedural programming. You'd be better served to simply tell the object to do what you were going to in the first place; also known as the Information Expert idiom.\nGetters and setters, however, are necessary evils at the boundary of layers -- UI, persistence, and so forth. Restricted access to a class's internals, such as C++'s friend keyword, Java's package protected access, .NET's internal access, and the Friend Class Pattern can help you reduce the visibility of getters and setters to only those who need them.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I suggest the incendiary article by Allen Holub \"Getters And Setters Are Evil\".",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Granted, the title is for shock value, but the author makes valid points",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Essentially, if you have getters and setters for each and every private field, you are making those fields as good as public.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "You'd be very hard-pressed to change the type of a private field without ripple effects to every class that calls that getter.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Moreover, from a strictly OO point of view, objects should be responding to messages (methods) that correspond to their (hopefully) single responsibility.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The vast majority of getters and setters don't make sense for their constituent objects;",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Pen.dispenseInkOnto(Surface) makes more sense to me than Pen.getColor().",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Getters and setters also encourage users of the class to ask the object for some data, perform a calculation, and then set some other value in the object, better known as procedural programming.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You'd be better served to simply tell the object to do what you were going to in the first place; also known as the Information Expert idiom.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Getters and setters, however, are necessary evils at the boundary of layers -- UI, persistence, and so forth.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Restricted access to a class's internals, such as C++'s friend keyword, Java's package protected access, .NET's internal access, and the Friend Class Pattern can help you reduce the visibility of getters and setters to only those who need them.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The purist OO way is to avoid both and follow the Law of Demeter by using the Tell Don't Ask approach.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Instead of getting the value of the object's property, which tightly couples the two class, use the object as a parameter e.g.\n\nWhere the property was a native type, e.g. int, use an access method,  name it for problem domain not the programming domain.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "These will allow you to maintain encapsulation and any post-conditions or dependent invariants.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "You can also use the setter method to maintain any pre-conditions or dependent invariants, however don't fall into the trap of naming them setters, go back to the Hollywood Principle for naming when using the idiom.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "PHP offers a myriad of ways to handle this, including magic methods __get and __set, but I prefer explicit getters and setters.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Here's why:\n\nValidation can be placed in setters (and getters for that matter)\nIntellisense works with explicit methods\nNo question whether a property is read only, write only or read-write\nRetrieving virtual properties (ie, calculated values) looks the same as regular properties \nYou can easily set an object property that is never actually defined anywhere, which then goes undocumented \n\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It depends. It's more a style issue than anything else, and there is no hard rule.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the meaning of the Java warning?\n\nType safety: The cast from Object to List is actually checking against the erased type List\n\nI get this warning when I try to cast an Object to a type with generic information, such as in the following code:\n\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This warning is there because Java is not actually storing type information at run-time in an object that uses generics.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Thus, if object is actually a List<String>, there will be no ClassCastException at run-time except until an item is accessed from the list that doesn't match the generic type defined in the variable.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This can cause further complications if items are added to the list, with this incorrect generic type information.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 1
    },
    {
        "pos": "Any code still holding a reference to the list but with the correct generic type information will now have an inconsistent list.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "To remove the warning, try:\n\nHowever, note that you will not be able to use certain methods such as add because the compiler doesn't know if you are trying to add an object of incorrect type.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "The above will work in a lot of situations, but if you have to use add, or some similarly restricted method, you will just have to suffer the yellow underline in Eclipse (or a SuppressWarning annotation).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I was reading More Joel on Software when I came across Joel Spolsky saying something about a particular type of programmer knowing the difference between an int and an Integer in Java/C# (Object Oriented Programming Languages).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, what is the difference?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In Java, the 'int' type is a primitive , whereas the 'Integer' type is an object.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In C#, the 'int' type is the same as System.Int32 and is a value type (ie more like the java 'int').",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "An integer (just like any other value types) can be boxed (\"wrapped\") into an object. \n\nThe differences between objects and primitives are somewhat beyond the scope of this question, but to summarize: \nObjects provide facilities for polymorphism, are passed by reference (or more accurately have references passed by value), and are allocated from the heap. Conversely, primitives are immutable types that are passed by value and are often allocated from the stack.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The differences between objects and primitives are somewhat beyond the scope of this question, but to summarize: \nObjects provide facilities for polymorphism, are passed by reference (or more accurately have references passed by value), and are allocated from the heap.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Conversely, primitives are immutable types that are passed by value and are often allocated from the stack.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Well, in Java an int is a primitive while an Integer is an Object.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Meaning, if you made a new Integer:\n\nYou could call some method on i:\n\nWhereas with an int:\n\nYou cannot call any methods on it, because it is simply a primitive.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "So:\n\nwould produce an error, because int is not an object.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "int is one of the few primitives in Java (along with char and some others).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not 100% sure, but I'm thinking that the Integer object more or less just has an int property and a whole bunch of methods to interact with that property (like the toString() method for example).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So Integer is a fancy way to work with an int (Just as perhaps String is a fancy way to work with a group of chars).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I know that Java isn't C, but since I've never programmed in C this is the closest I could come to the answer.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hope this helps!\nInteger object javadoc\nInteger Ojbect vs. int primitive comparison\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "In C#, int is just an alias for System.Int32, string for System.String, double for System.Double etc...\nPersonally I prefer int, string, double, etc. because they don't require a using System; statement :) A silly reason, I know...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I'll add to the excellent answers given above, and talk about boxing and unboxing, and how this applies to Java (although C# has it too).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I'll use just Java terminology, because I am more au fait with that.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As the answers mentioned, int is just a number (called the unboxed type), whereas Integer is an object (which contains the number, hence a boxed type).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In Java terms, that means (apart from not being able to call methods on int), you cannot store int or other non-object types in collections (List, Map, etc.).",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "In order to store them, you must first box them up in its corresponding boxed type.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Java 5 onwards have something called auto-boxing and auto-unboxing which allow the boxing/unboxing to be done behind the scenes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Compare and contrast: Java 5 version:\n\nJava 1.4 or earlier (no generics either):\n\nIt must be noted that despite the brevity in the Java 5 version, both versions generate identical bytecode. Thus, although auto-boxing and auto-unboxing is very convenient because you write less code, these operations do happen behind the scenes, with the same runtime costs, so you still have to be aware of their existence.\nHope this helps!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thus, although auto-boxing and auto-unboxing is very convenient because you write less code, these operations do happen behind the scenes, with the same runtime costs, so you still have to be aware of their existence.\nHope this helps!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I'll just post here since some of the other posts are slightly inaccurate in relation to C#.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Correct: int is an alias for System.Int32.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Wrong: float is not an alias for System.Float, but for System.Single\nBasically, int is a reserved keyword in the C# programming language, and is an alias for the System.Int32 value type.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "float and Float is not the same however, as the right system type for ''float'' is System.Single.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are some types like this that has reserved keywords that doesn't seem to match the type names directly.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In C# there is no difference between ''int'' and ''System.Int32'', or any of the other pairs or keywords/system types, except for when defining enums.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": " With enums you can specify the storage size to use and in this case you can only use the reserved keyword, and not the system runtime type name.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Wether the value in the int will be stored on the stack, in memory, or as a referenced heap object depends on the context and how you use it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nThis declaration in a method:\n\ndefines a variable i of type System.Int32, living in a register or on the stack, depending on optimizations.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The same declaration in a type (struct or class) defines a member field.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The same declaration in a method argument list defines a parameter, with the same storage options as for a local variable.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(note that this paragraph is not valid if you start pulling iterator methods into the mix, these are different beasts altogether)\nTo get a heap object, you can use boxing:\n\nthis will create a boxed copy of the contents of i on the heap.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In IL you can access methods on the heap object directly, but in C# you need to cast it back to an int, which will create another copy.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thus, the object on the heap cannot easily be changed in C# without creating a new boxed copy of a new int value.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(Ugh, this paragraph doesn't read all that easily.)\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "This has already been answered for Java, here's the C# answer:\n\"Integer\" is not a valid type name in C# and \"int\" is just an alias for System.Int32.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Also, unlike in Java (or C++) there aren't any special primitive types in C#, every instance of a type in C# (including int) is an object.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
        {
        "pos": "Here's some demonstrative code:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Regarding Java 1.5 and autoboxing there is an important \"quirk\" that comes to play when comparing Integer objects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In Java, Integer objects with the values -128 to 127 are immutable (that is, for one particular integer value, say 23, all Integer objects instantiated through your program with the value 23 points to the exact same object).\nExample, this returns true:\n\nWhile this returns false:\n\nThe == compares by reference (does the variables point to the same object).\nThis result may or may not differ depending on what JVM you are using.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The specification autoboxing for Java 1.5 requires that integers (-128 to 127) always box to the same wrapper object.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A solution? =) One should always use the Integer.equals() method when comparing Integer objects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
     {
        "pos": "More info at java.net Example at bexhuff.com\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In Java there are two basic types in the JVM.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "1) Primitive types and 2) Reference Types.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "int is a primitive type and Integer is a class type (which is kind of reference type).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Primitive values do not share state with other primitive values.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "A variable whose type is a primitive type always holds a primitive value of that type.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "An object is a dynamically created class instance or an array.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The reference values (often just references) are pointers to these objects and a special null reference, which refers to no object.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There may be many references to the same object.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Also in Java everything is passed by value.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With objects the value that is passed is the reference to the object.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So another difference between int and Integer in java is how they are passed in method calls.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example in\n\nThe variable two is passed as the primitive integer type 2.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Whereas in\n\nThe variable two is passed as a reference to an object that holds the integer value 2.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@WolfmanDragon:\nPass by reference would work like so:\n\nWhen increment is called it passes a reference (pointer) to variable a.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "And the increment function directly modifies variable a.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "And for object types it would work as follows:\n\nDo you see the difference now?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One more thing that I don't see in previous answers:\nIn Java the primitive wrappers classes like Integer, Double, Float, Boolean... and String are suposed to be invariant, so that when you pass an instance of those classes the invoked method couldn't alter your data in any way, in opositi\u00f3n with most of other classes, which internal data could be altered by its public methods.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "So that this classes only has 'getter' methods, no 'setters', besides the constructor.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In a java program String literals are stored in a separate portion of heap memory, only a instance for literal, to save memory reusing those instances\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is there a way to create a JButton with your own button graphic and not just with an image inside the button? \nIf not, is there another way to create a custom button in java?\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I haven't done SWING development since my early CS classes but if it wasn't built in you could just inherit javax.swing.AbstractButton and create your own.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Should be pretty simple to wire something together with their existing framework.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You could always try the Synth look & feel.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "You provide an xml file that acts as a sort of stylesheet, along with any images you want to use.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The code might look like this:\n\nFrom there, go on and add your JButton like you normally would.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The only change is that you use the setName(string) method to identify what the button should map to in the xml file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The xml file might look like this:\n\nThe bind element there specifies what to map to (in this example, it will apply that styling to any buttons whose name property has been set to \"dirt\").\nAnd a couple of useful links:\nhttp://javadesktop.org/articles/synth/\nhttp://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Yes, this is possible.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "One of the main pros for using Swing is the ease with which the abstract controls can be created and manipulates.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Note that by overriding paintComponent that the contents of the button can be changed, but that the border is painted by the paintBorder method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The getPreferredSize method also needs to be managed in order to dynamically support changes to the content.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Care needs to be taken when measuring font metrics and image dimensions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For creating a control that you can rely on, the above code is not the correct approach.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Dimensions and colours are dynamic in Swing and are dependent on the look and feel being used.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Even the default Metal look has changed across JRE versions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It would be better to implement AbstractButton and conform to the guidelines set out by the Swing API.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": " A good starting point is to look at the javax.swing.LookAndFeel and javax.swing.UIManager classes.\nhttp://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html\nhttp://docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html\nUnderstanding the anatomy of LookAndFeel is useful for writing controls:\nCreating a Custom Look and Feel\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one JPanel.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "The benefit of extending Swing components, of course, is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a paint() method print a pretty picture.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It may not be done the best way however, but it may be a good starting point for you.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit 8/6 - If it wasn't apparent from the images, each Die is a button you can click.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This will move it to the DiceContainer below.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Looking at the source code you can see that each Die button is drawn dynamically, based on its value.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here are the basic steps:\n\nCreate a class that extends JComponent\nCall parent constructor super() in your constructors\nMake sure you class implements MouseListener\nPut this in the constructor:\n\nOverride these methods:\n\nOverride this method:\n\n\nThe amount of space you have to work with when drawing your button is defined by getPreferredSize(), assuming getMinimumSize() and getMaximumSize() return the same value.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I haven't experimented too much with this but, depending on the layout you use for your GUI your button could look completely different.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "And finally, the source code.  In case I missed anything.  \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm probably going a million miles in the wrong direct (but i'm only young :P ).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "but couldn't you add the graphic to a panel and then a mouselistener to the graphic object so that when the user on the graphic your action is preformed.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What are some different ways of parsing strings in Java?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For parsing player commands, I've most often used the split method to split a string by delimiters and then to then just figure out the rest by a series of ifs or switches.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },

     {
        "pos": "I've never tried it, but you should write a test case to see if reading from a stream after you have hit the end will work, regardless of if there is more data written to the file.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is there a reason you can't use a piped input/output stream?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": " Is the data being written and read from the same application (if so, you have the data, why do you need to read from the file)?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Otherwise, maybe read till end of file, then monitor for changes and seek to where you left off and continue... though watch out for race conditions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The answer seems to be \"no\" ... and \"yes\".",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There seems to be no real way to know if a file is open for writing by another application.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, reading from such a file will just progress until content is exhausted.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I took Mike's advice and wrote some test code:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Writer.java writes a string to file and then waits for the user to hit enter before writing another line to file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The idea being that it could be started up, then a reader can be started to see how it copes with the \"partial\" file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The reader I wrote is in Reader.java.\nWriter.java\n\nReader.java\n\nNo guarantees that this code is best practice.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This leaves the option suggested by Mike of periodically checking if there is new data to be read from the file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This then requires user intervention to close the file reader when it is determined that the reading is completed.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Or, the reader needs to be made aware the content of the file and be able to determine and end of write condition.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If the content were XML, the end of document could be used to signal this.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You might also take a look at java channel for locking a part of a file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "http://java.sun.com/javase/6/docs/api/java/nio/channels/FileChannel.html\nThis function of the FileChannel might be a start\n\nAn invocation of this method will block until the region can be locked\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Could not get the example to work using FileChannel.read(ByteBuffer) because it isn't a blocking read.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Did however get the code below to work:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Of course the same thing would work as a timer instead of a thread, but I leave that up to the programmer.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm still looking for a better way, but this works for me for now.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Oh, and I'll caveat this with: I'm using 1.4.2. Yes I know I'm in the stone ages still.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm using 1.4.2. Yes I know I'm in the stone ages still.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Yes I know I'm in the stone ages still.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I want to convert a primitive to a string, and I tried:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This fails with the error:",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "Now, I get that primitives are not reference types (ie, not an Object) and so cannot have methods.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, Java 5 introduced autoboxing and unboxing (a la C#... which I never liked in C#, but that's beside the point).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "So with autoboxing, I would expect the above to convert myInt to an Integer and then call toString() on that.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Furthermore, I believe C# allows such a call, unless I remember incorrectly.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is this just an unfortunate shortcoming of Java's autoboxing/unboxing specification, or is there a good reason for this?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Java autoboxing/unboxing doesn't go to the extent to allow you to dereference a primitive, so your compiler prevents it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Your compiler still knows myInt as a primitive.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's a paper about this issue at jcp.org.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Autoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So unfortunately, you would have to do it like this:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "(kudos Patrick, I switched to your way)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Ditto on what Justin said, but you should do this instead:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It saves an allocation or two and is more readable.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "seems like a shortcoming of the \n  specification to me\n\nThere are more shortcomings and this is a subtle topic.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Check this out:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here \"long\" would be printed (haven't checked it myself), because the compiler choses widening over autoboxing",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Be careful when using autoboxing or don't use it at all!",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "One other way to do it is to use:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This method is overloaded for every primitive type and Object.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This way you don't even have to think about the type you're using.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Implementations of the method will call the appropriate method of the given type for you, e.g. Integer.toString(myInt).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "See http://java.sun.com/javase/6/docs/api/java/lang/String.html.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In C#, integers are neither reference types nor do they have to be boxed in order for ToString() to be called.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "They are considered objects in the Framework (as a ValueType, so they have value semantics), however.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In the CLR, methods on primitives are called by \"indirectly\" loading them onto the stack (ldind).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The valid syntax closest to your example is\n\nWhen the compiler finishes, that's equivalent to\n\nHowever, this doesn't perform as well as the conventional usage, String.valueOf(myInt), because, except in special cases, it creates a new Integer instance, then immediately throws it away, resulting in more unnecessary garbage.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "(A small range of integers are cached, and access by an array access.) Perhaps language designers wanted to discourage this usage for performance reasons.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Edit: I'd appreciate it if the downvoter(s) would comment about why this is not helpful.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Example: I have two shared objects (same should apply to .dlls).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The first shared object is from a third-party library, we'll call it libA.so.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have wrapped some of this with JNI and created my own library, libB.so.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Now libB depends on libA.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "When webstarting, both libraries are places in some webstart working area.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "My java code attempts to load libB.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "At this point the system loader will attempt to load libA which is not in the system library path (java.library.path won't help this).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The end result is that libB has an unsatisfied link and cannot be used.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have tried loading libA before libB, but that still does not work.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Seems the OS wants to do that loading for me.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is there any way I can make this work other than statically  compiling?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not sure if this would be handled exactly the same way for webstart, but we ran into this situation in a desktop application when dealing with a set of native libraries (dlls in our case).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Loading libA before libB should work, unless one of those libraries has a dependency that is unaccounted for and not in the path.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "My understanding is that once it gets to a system loadLibrary call (i.e. Java has found the library in its java.library.path and is now telling the OS to load it) - it is completely dependent on the operating system to find any dependent libraries, because at that point it is the operating system that is loading the library for the process, and the OS only knows how to look in the system path.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That seems hard to set in the case of a Webstart app, but there is a way around this that does not involve static compiling.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You may be able to shuffle where your libraries are - I am unsure \nIf you use a custom classloader, you can override loadLibrary and findLibrary so that it can locate your libraries from within a jar in your classpath, and if you also make it aware of your native library dependencies (i.e. libB depends on libA depends on libX, then when loading libB you can catch yourself and ensure you load libA first, and in checking that notice and load libX first.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then the OS doesn't try to find a library that isn't in your path.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": " It's klunky and a bit painful, but ensuring Java finds them and loads them all in the correct order can work.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Are both native libraries packaged into a signed jar which is listed as\n\nIn the JNLP file?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I saw this in an answer to another question, in reference to shortcomings of the java spec:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are more shortcomings and this is a subtle topic.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Check this out:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here \"long\" would be printed (haven't checked it myself), because the compiler choses >widening over autoboxing.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Be careful when using autoboxing or don't use it at all!",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Are we sure that this is actually an example of widening instead of autoboxing, or is it something else entirely?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "On my initial scanning, I would agree with the statement that the output would be \"long\" on the basis of i being declared as a primitive and not an object.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, if you changed \n\nto\n\nthe output would print \"Integer\"\nWhat's really going on here?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I know nothing about the compilers/bytecode interpreters for java...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Yes it is, try it out in a test.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You will see \"long\" printed.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It is widening because Java will choose to widen the int into a long before it chooses to autobox it to an Integer, so the hello(long) method is chosen to be called.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit: the original post being referenced.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Further Edit:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The reason the second option would print Integer is because there is no \"widening\" into a larger primitive as an option, so it MUST box it up, thus Integer is the only option.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Furthermore, java will only autobox to the original type, so it would give a compiler error if you leave the hello(Long) and removed hello(Integer).\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "In the first case, you have a widening conversion happening.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This can be see when runinng the \"javap\" utility program (included w/ the JDK), on the compiled class:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Clearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "See reference here.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "And in the other case, replacing the \"long x\" with the object \"Long x\" signature, you'll have this code in the main method:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another interesting thing with this example is the method overloading.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The combination of type widening and method overloading only working because the compiler has to make a decision of which method to choose.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Consider the following example:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It doesn't use the run-time type which is List, it uses the compile-time type which is Collection and thus prints \"Collection\".",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I encourage your to read Effective Java, which opened my eyes to some corner cases of the JLS.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "What is the Java equivalent of PHP's $_POST?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "After searching the web for an hour, I'm still nowhere closer.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Your HttpServletRequest object has a getParameter(String paramName) method that can be used to get parameter values.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "POST variables should be accessible via the request object:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "HttpRequest.getParameterMap().",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The exception is if the form is sending multipart MIME data (the FORM has enctype=\"multipart/form-data\").",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In that case, you need to parse the byte stream with a MIME parser.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can write your own or use an existing one like the Apache Commons File Upload API.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here's a simple example.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I didn't get fancy with the html or the servlet, but you should get the idea.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I hope this helps you out.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Now for the Servlet",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, in Java, the first line of your constructor HAS to be a call to super... be it implicitly calling super(), or explicitly calling another constructor.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What I want to know is, why can't I put a try block around that?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "My specific case is that I have a mock class for a test.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There is no default constructor, but I want one to make the tests simpler to read.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I also want to wrap the exceptions thrown from the constructor into a RuntimeException.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, what I want to do is effectively this:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "But Java complains that super isn't the first statement.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "My workaround:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is this the best workaround?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Why doesn't Java let me do the former?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "My best guess as to the \"why\" is that Java doesn't want to let me have a constructed object in a potentially inconsistent state...",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "however, in doing a mock, I don't care about that.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "It seems I should be able to do the above...",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "or at least I know that the above is safe for my case...",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "or seems as though it should be anyways.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am overriding any methods I use from the tested class, so there is no risk that I am using uninitialized variables.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, compilers can't work on theoretical principles, and even though you may know that it is safe in your case, if they allowed it, it would have to be safe for all cases.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "In other words, the compiler isn't stopping just you, it's stopping everyone, including all those that don't know that it is unsafe and needs special handling.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are probably other reasons for this as well, as all languages usually have ways to do unsafe things if one knows how to deal with them.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In C# .NET there are similar provisions, and the only way to declare a constructor that calls a base constructor is this:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "in doing so, the base constructor will be called before the body of the constructor, and you cannot change this order.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't know how Java is implemented internally, but if the constructor of the superclass throws an exception, then there isn't a instance of the class you extend.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "It would be impossible to call the toString() or equals() methods, for example, since they are inherited in most cases.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Java may allow a try/catch around the super() call in the constructor if",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "1. you override ALL methods from the superclasses, and ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "2. you don't use the super.XXX() clause, but that all sounds too complicated to me.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I can't presume to have a deep understanding of Java internals, but it is my understanding that, when a compiler needs to instantiate a derived class, it has to first create the base (and its base before that(...)) and then slap on the extensions made in the subclass.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So it is not even the danger of uninited variables or anything like that at all.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "When you try to do something in the subclass' constructor before the base class' constructor, you are basically asking the compiler to extend a base object instance that doesn't exist yet.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit:In your case, MyClass becomes the base object, and MyClassMock is a subclass.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's done to prevent someone from creating a new SecurityManager object from untrusted code.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I just saw a comment of suggesting J#, and it made me wonder... ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "is there a real, beneficial use of J# over Java?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, my feeling is that the only reason you would even consider using J# is that management has decreed that the company should jump on the Java bandwagon... and the .NET bandwagon.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "If you use J#, you are effectively losing the biggest benefit of picking Java... rich cross platform support.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Sure there is Mono, but it's not as richly supported or as full featured right?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I remember hearing Forms are not fully (perhaps at all) supported.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not trying to bash .NET here, I'm just saying, if you are going to go the Microsoft route, why not just use C#?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you are going to go the Java route, why would J# enter the picture?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm hoping to find some real world cases here, so please especially respond if you've ACTUALLY used J# in a REAL project, and why.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "J# is no longer included in VS2008.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unless you already have J# code, you should probably stay away.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From j# product page:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Since customers have told us that the\n  existing J# feature set largely meets\n  their needs and usage of J# is\n  declining, Microsoft is retiring the\n  Visual J# product and Java Language\n  Conversion Assistant tool to better\n  allocate resources for other customer\n  requirements.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The J# language and JLCA\n  tool will not be available in future\n  versions of Visual Studio.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "To preserve\n  existing customer investments in J#,\n  Microsoft will continue to support the\n  J# and JLCA technology that shipped\n  with Visual Studio 2005 through to\n  2015 as per our product life-cycle\n  strategy.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For more information, see\n  Expanded Microsoft Support Lifecycle\n  Policy for Business & Development\n  Products.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The whole purpose of J# is to ease the transition of Java developers to the .NET environment which didn't work so well (I guessing here) so Microsoft dropped J# from Visual Studio 2008.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For your question, \"Is there a real benefit of using J#?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "in a nutshell... ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "No..",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the killers I've found with J# in the past is that there is no built in support for referencing web services.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That alone has been enough to deter me from it ever since.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "C# syntax is so close to Java (and better in some ways) that you might as well learn C# instead of J#.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "And since C# is more widely used, you can easily find Java --> C# tutorials on google or check out http://www.asp.net/learn and watch some videos.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Instead of J#, I would rather prefer IKVM (http://www.ikvm.net/) to convert my JARs to .NET assemblies as well as access Java APIs in C#.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Strongly agree that syntactically C# beats Java hands down, so there is really no reason to lament the demise of j#.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Now trying to get c# compiling to Java bytecode might be an interesting move as Sun's hotspot jvm is great software.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Or, for a bit of fun with what might well become the next generation of Java, how about Scala on the CLR...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't think it's a matter of which language is better.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In the .NET world there are some inconsistencies between the libraries different languages provide.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "There are certain functionality that is available in VB.NET that you might like to use from C# but can't.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I remember I had to use J# to use some ZIP libraries that were not available in any other language in .NET.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have used J# as an easy interim step to port a java library into C#.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It made for a good way to port code I don't plan to maintain from Java to .Net.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, all new development is being done in C#.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've found many sources that talk about the automated Eclipse PDE process.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I feel these sources don't do a good job explaining what's going on.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I can create the deployable package, in a semi-manual process via the Feature Export.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The automated process requires knowledge of how the org.eclipse.pde.build scripts work.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have gotten a build created, but not for JNLP.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Questions: Has anyone ever deployed RCP through JNLP?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Were you able to automate the builds?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I haven't done this before, but I found this site on the web giving an explanation.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is anyone successfully using the latest 64-bit Ganymede release of Eclipse on Windows XP or Vista 64-bit?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Currently I run the normal Eclipse 3.4 distribution on a 32bit JDK and launch & compile my apps with a 64bit JDK.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Our previous experience has been that the 64bit Eclipse distro is unstable for us, so I'm curious if anyone is using it successfully.\nWe are using JDK 1.6.0_05.\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "We are using JDK 1.6.0_05.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've been successfully using it on Vista x64 for some light Java work.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Nothing too involved and no extra plugins, but basic Java coding has been working without any issues.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I'm using the 3.4M7 build but it looks like the 3.4 stable build supports Vista x64 now.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm using Eclipse with a 64bit VM.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However I have to use Java 1.5, because with Java 1.6, even 1.6.0_10ea, Eclipse crashed when changing the .classpath-file.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "On Linux I had the same problems and could only get the 64bit Eclipse to work with 64bit Java 1.5.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "The problem seems to be with the just in time compilation, since with vmparam -Xint eclipse works -- but this is not a sollution, because it's slow then.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos": "Edit:With 1.6.0_11 it seems to work.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "1.6_10 final might work as well as mentioned in the comment, but I've not tested that.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am running a Tomcat application, and I need to display some time values.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, the time is coming up an hour off.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I looked into it and discovered that my default TimeZone is being set to:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Rather than the Pacific time zone.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This is further indicated when I try to print the default time zone's display name, and it comes up \"GMT-08:00\", which seems to indicate to me that it is not correctly set to the US Pacific time zone.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am running on Ubuntu Hardy Heron, upgraded from Gutsy Gibbon.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is there a configuration file I can update to tell the JRE to use Pacific with all the associated daylight savings time information?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The time on my machine shows correctly, so it doesn't seem to be an OS-wide misconfiguration.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Ok, here's an update.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },{
        "pos": "A coworker suggested I update JAVA_OPTS in my /etc/profile to include \"-Duser.timezone=US/Pacific\", which worked (I also saw CATALINA_OPTS, which I updated as well).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Actually, I just exported the change into the variables rather than use the new /etc/profile (a reboot later will pick up the changes and I will be golden).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, I still think there is a better solution...",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "there should be a configuration for Java somewhere that says what timezone it is using, or how it is grabbing the timezone.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If someone knows such a setting, that would be awesome, but for now this is a decent workaround.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am using 1.5, and it is most definitely a DST problem.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "As you can see, the time zone is set to not use daylight savings.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "My belief is it is generically set to -8 offset rather than the specific Pacific timezone.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Since the generic -8 offset has no daylight savings info, it's of course not using it, but the question is, where do I tell Java to use Pacific time zone when it starts up?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm NOT looking for a programmatic solution, it should be a configuration solution.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hmm... off by one hour.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "DST possibly?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is the date set correctly?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What version of the JDK is this running on?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(\"java -version\")",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's a \"quirk\" in the way the JVM looks up the zoneinfo file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "See Bug ID 6456628.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The easiest workaround is to make /etc/localtime a symlink to the correct zoneinfo file.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For Pacific time, the following commands should work:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I haven't had any problems with the symlink approach.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit:",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Added \"sudo\" to the commands.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It may help to double-check the timezone rules your OS is using.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This file should contain your daylight savings rules, like this one for the year 2080:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can compare this with the timezone rules you think you should be using.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "They can be found in /usr/share/zoneinfo/.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I had a similar issue, possibly the same one.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However my tomcat server runs on a windows box so the symlink solution will not work",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I set \"-Duser.timezone=Australia/Sydney\" in the JAVA_OPTS however tomcat would not recognize that DST was in effect.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As a workaround i changed Australia/Sydney (+10 GMT) to Pacific/Numea (+11 GMT) so that times would correctly display however i would love to know the actual solution or bug, if any.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "On a recent Java project, we needed a free Java based real-time data plotting utility.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "After much searching, we found this tool called the Scientific Graphics Toolkit or SGT from NOAA.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It seemed pretty robust, but we found out that it wasn't terribly configurable.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Or at least not configurable enough to meet our needs.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We ended up digging very deeply into the Java code and reverse engineering the code and changing it all around to make the plot tool look and act the way we wanted it to look and act.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Of course, this killed any chance for future upgrades from NOAA.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So what free or cheap Java based data plotting tools or libraries do you use?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Followup:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thanks for the JFreeChart suggestions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I checked out their website and it looks like a very nice data charting and plotting utility.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I should have made it clear in my original question that I was looking specifically to plot real-time data.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I corrected my question above to make that point clear.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It appears that JFreeChart support for live data is marginal at best, though.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Any other suggestions out there?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I used JFreeChart (http://www.jfree.org/jfreechart/) on a previous project.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It has some very good built-in capabilities, and the design was WAY extensible so you could always roll your own extension later if you needed some custom chart annotation or wanted an axis to render differently, or whatever.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "It's definitely worth checking out.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I've had success using JFreeChart on multiple projects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "It is very configurable.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "JFreeChart is open source, but they charge for the developer guide.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },

    {
        "pos": "If you're doing something simple, the sample code is probably good enough.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Otherwise, $50 for the developer guide is a pretty good bargain.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "With respect to \"real-time\" data, I've also used JFreeChart for these sorts of applications.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, I had to create some custom data models with appropriate synchronization mechanisms to avoid race conditions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "However, it wasn't terribly difficult and JFreeChart would still be my first choice.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "However, as the FAQ suggests, JFreeChart might not give you the best performance if that is a big concern.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I've used JFreeChart in a rather complex application that needed to visualize data streams and calculations based on the data.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We implemented the ability to visually edit the data plots by mouse and had a very large set of data points.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "JFreeChart handled it very well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Unfortunately I was stuck with v0.7, but the newest release are sooo much better when it comes to API clarity.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "The community is very helpful and the developers are responding to mails too.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "If you're doing a web application and don't want to bother with libraries, you can check the Google Chart API.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Didn't use it myself, but I started some tests which were very promising.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },

       {
        "pos": "Check ILOG's JViews - they have a lot of stuff and something might fit your needs.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "All of them are extremely configurable and quite fast.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Not free though.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "At work we are currently still using JUnit 3 to run our tests.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We have been considering switching over to JUnit 4 for new tests being written but I have been keeping an eye on TestNG for a while now.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What experiences have you all had with either JUnit 4 or TestNG, and which seems to work better for very large numbers of tests?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Having flexibility in writing tests is also important to us since our functional tests cover a wide aspect and need to be written in a variety of ways to get results.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Old tests will not be re-written as they do their job just fine.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Old tests will not be re-written as they do their job just fine.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "What I would like to see in new tests though is flexibility in the way the test can be written, natural assertions, grouping, and easily distributed test executions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "First I would say, don't rewrite all your tests just to suit the latest fad.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Junit3 works perfectly well, and the introduction of annotations in 4 doesn't buy you very much (in my opinion).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "It is much more important that you guys write tests, and it sounds like you do.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use whatever seems most natural and helps you get your work done.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I can't comment on TestNG b/c I haven't used it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "But I would recommend unitils, a great wrapper for JUnit/TestNG/DBUnit/EasyMock, regardless of which route you take.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "(It supports all the flavors mentioned above)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used both, but I have to agree with Justin Standard that you shouldn't really consider rewriting your existing tests to any new format.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Regardless of the decision, it is pretty trivial to run both.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG strives to be much more configurable than JUnit, but in the end they both work equally well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Thus you can mark tests that run slowly as in the \"slow\" group and then ignore them when you want quick results.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A suggestion from their documentation is to mark some subset as \"checkin\" tests which should be run whenever you check new files in.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I never saw such a feature in JUnit, but then again, if you don't have it, you don't REALLY miss it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn't do what I wanted to do.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I wish I could remember what it is, but I wanted to bring it up so you know that it's not perfect.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "The biggest advantage TestNG has is annotations which JUnit added in version 4 anyways.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Thus you can mark tests that run slowly as in the \"slow\" group and then ignore them when you want quick results.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A suggestion from their documentation is to mark some subset as \"checkin\" tests which should be run whenever you check new files in.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I never saw such a feature in JUnit, but then again, if you don't have it, you don't REALLY miss it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn't do what I wanted to do.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I wish I could remember what it is, but I wanted to bring it up so you know that it's not perfect.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "The biggest advantage TestNG has is annotations which JUnit added in version 4 anyways.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "About a year ago, we had the same problem",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I spent sometime considering which move was better, and eventually we realized that TestNG has no 'killer features'.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's nice, and has some features JUnit 4 doesn't have, but we don't need them.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "We didn't want people to feel uncomfortable writing tests while getting to know TestNG because we wanted them to keep writing a lot of tests.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Also, JUnit is pretty much the de-facto standard in the Java world.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "There's no decent tool that doesn't support it from the box, you can find a lot of help on the web and they added a lot of new features in the past year which shows it's alive.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We decided to stick with JUnit and never looked back.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG's biggest draw cards for me include its support test groups, and more importantly - test group dependencies (marking a test as being dependent of a group causes the tests to simply skip running when the dependent group fails).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG's other big draw cards for me include test parameters, data providers, annotation transformers, and more than anything - the vibrant and responsive user community.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Whilst on the surface one might not think all of TestNGs features above might not be needed, once you start to understand the flexibility bring to your tests, you'll wonder how you coped with JUnit.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(disclaimer - I've not used JUnit 4.x at all, so am unable to really comment on advances or new features there).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A couple of additions to Mike Stone's reply:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "1) The most frequent thing I use TestNG's groups for is when I want to run a single test method in a test suite.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I simply add this test to the group \"phil\" and then run this group.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "When I was using JUnit 3, I would comment out the entries for all methods but the one I wanted to run in the \"suite\" method, but then would commonly forget to uncomment them before checkin.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With the groups, I no longer have this problem.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have info on my migration from JUnit to TestNG here and here.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm going to start a new project - rewriting an existing system (PHP + SQL Server) from scratch because of some very serious limitations by design.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We have some quite good knowledge of SQL Server (currently we're using SQL Server 2000 in existing system) and we would like to employ its newer version (2008 I guess) in our new project.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am really fond of technologies that Java offers - particularly Spring Framework and Wicket and I am quite familiar with Java from others projects and assignments before.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Therefore, we consider using Java and Microsoft SQL Server.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are two JDBC drivers for SQL Server - jTDS and Microsoft's one - http://msdn.microsoft.com/en-us/data/aa937724.aspx.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think we should test both of them.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Are there any limitations in such solution I should know of? Has someone experience with such a technology combination?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't know about Java and 2008 but you shouldn't have too much trouble with Java and SQL2000.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As lubos suggested, you'd be doing yourself a favour to look at c# but if you're much more comfortable with Java then there shouldn't be any real limitations as the JDBC connector is supported by Microsoft",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've worked on a project using MSQL Server in conjunction with a Java Stack.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It works very well and as long, since JDBC shouldn't really care about your database.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "We used ehcache together with Hibernate and had problems with the MS JDBC Driver, so we switched to jtds and it works really good.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "It's quite a while ago, so you still might wanna give the MS driver a chance.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We've been running an application using Hibernate talking to multiple remote MSQL Server instances for a few years now and we also switched to the jTDS driver early on after a few issues with the M$ driver.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Since the switch we haven't had any issues at all.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "However, it's not a complicated application so it doesn't use any LOB's.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hope that helps.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "jTDS is excellent.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I've been using it for years without issue in high-availability production environments.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "jTDS is excellent.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I've been using it for years without issue in high-availability production environments.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I would lean towards the jTDS driver.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The MSSQL driver has a limitation where you cannot re-read the same column twice.  This happens frequently when using Hibernate.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I was hoping someone could help me out with a problem I'm having using the java search function in Eclipse on a particular project.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "When using the java search on one particular project, I get an error message saying Class file name must end with .class (see stack trace below).",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This does not seem to be happening on all projects, just one particular one, so perhaps there's something I should try to get rebuilt?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have already tried Project -> Clean and Closing Eclipse, deleting all the built class files and restarting Eclipse to no avail.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The only reference I've been able to find on Google for the problem is at http://www.crazysquirrel.com/computing/java/eclipse/error-during-java-search.jspx, but unfortunately his solution (closing, deleting class files, restarting) did not work for me.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If anyone can suggest something to try, or there's any more info I can gather which might help track it's down, I'd greatly appreciate the pointers.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Also just found this thread - http://www.myeclipseide.com/PNphpBB2-viewtopic-t-20067.html - which indicates the same problem may occur when the project name contains a period.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, that's not the case in my setup, so I'm still stuck.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thanks McDowell, closing and opening the project seems to have fixed it (at least for now).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Two more general-purpose mechanisms for fixing some of Eclipse's idiosyncrasies:",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Close and open the project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Delete the project (but not from disk!) and reimport it as an existing project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Failing that, bugs.eclipse.org might provide the answer.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "If the workspace is caching something broken, you may be able to delete it by poking around in workspace/.metadata/.plugins.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Most of that stuff is fairly transient (though backup and watch for deleted preferences).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm part of a team that develops a pretty big Swing Java Applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Most of our code are legacy and there are tons of singleton references.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We've bunched all of them to a single \"Application Context\" singleton.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What we now need is to create some way to separate the shared context (shared across all applets currently showing) and non-shared context (specific to each applet currently showing).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, we don't have an ID at each of the locations that call to the singleton, nor do we want to propagate the ID to all locations.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What's the easiest way to identify in which applet context we're running?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(I've tried messing with classloaders, thread groups, thread ids so far I could find nothing that will enable me to ID the origin of the call).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I understand you correctly, the idea is to get a different \"singleton\" object for each caller object or \"context\".",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing you can do is to create a thread-local global variable where you write the ID of the current context.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(This can be done with AOP.)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then in the singleton getter, the context ID is fetched from the thread-local to use as a key to the correct \"singleton\" instance for the calling context.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Regarding AOP there should be no problem using it in applets since, depending on your point-cuts, the advices are woven at compile time and a JAR is added to the runtime dependencies.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hence, no special evidence of AOP should remain at run time.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Hugo regarding threadlocal:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I thought about that solution.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, from experiments I found two problems with that approach:",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Shared thread (server connections, etc) are problematic.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This can be solved though by paying special attention to these thread (they're all under my control and are pretty much isolated from the legacy code).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The EDT thread is shared across all applets.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I failed to find a way to force the creation of a new EDT thread for each applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I failed to find a way to force the creation of a new EDT thread for each applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This means that the threadlocal for the EDT would be shared across the applets.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This one I have no idea how to solve.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Suggestions?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Singletons are evil, what do you expect? ;)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Perhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then use a WeakHashMap to associate class loader with an applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase, that would be faster but more work.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Other hacks:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you have access to any component, you can use Component.getParent repeatedly or SwingUtilities.getRoot.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you are in a per-applet instance thread, then you can set up a ThreadLocal.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From the EDT, you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()), and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Recently I tried understanding the use of java.math.MathContext but failed to understand properly.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is it used for rounding in java.math.BigDecimal, if yes why does not it round the decimal digits but even mentissa part.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From API docs, I came to know that it follows the standard specified in ANSI X3.274-1996 and ANSI X3.274-1996/AM 1-2000 specifications but I did not get them to read online.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Please let me know if you have any idea on this.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I'm understanding you correctly, it sounds like you're expecting the MathContext to control how many digits should be kept after the decimal point.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That's not what it's for.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It specifies how many digits to keep, total.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So if you specify that you want 3 significant digits, that's all you're going to get.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example, this:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "will output:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's not for fun.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Actually I found some online example, which stated the use of MathContext to round the amounts/numbers stored in BigDecimal.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example,",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If MathContext is configured to have precision = 2 and rounding mode = ROUND_HALF_EVEN",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "BigDecimal Number = 0.5294, is rounded to 0.53",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So I thought it is a newer technique and used it for rounding purpose.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However it turned into nightmare because it started rounding even mentissa part of number.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example, Number = 1.5294 is rounded to 1.5, Number = 10.5294 is rounded to 10, Number = 101.5294 is rounded to 100 and so on",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So this is not the behavior I expected for rounding (as precision = 2).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It seems to be having some logic because from patter I can say that it takes first two digits (as precision is 2) of number and then appends 0's till the no. of digits become same as unrounded amount (checkout the example of 101.5294)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thanks for you answer.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It makes sense.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Can you please explain me MathContext in the context of BigDecimal#round method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's nothing special about BigDecimal.round() vs. any other BigDecimal method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In all cases, the MathContext specifies the number of significant digits and the rounding technique.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Basically, there are two parts of every MathContext.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's a precision, and there's also a RoundingMode.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The precision again specifies the number of significant digits.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So if you specify 123 as a number, and ask for 2 significant digits, you're going to get 120.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It might be clearer if you think in terms of scientific notation.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you only keep 2 significant digits, then you get 1.2e2, or 120.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "By reducing the number of significant digits, we reduce the precision with which we can specify a number.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The RoundingMode part specifies how we should handle the loss of precision.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "To reuse the example, if you use 123 as the number, and ask for 2 significant digits, you've reduced your precision.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With a RoundingMode of HALF_UP (the default mode), 123 will become 120",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With a RoundingMode of CEILING, you'll get 130.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Outputs:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can see that both the precision and the rounding mode affect the output.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "First of all, I know how to build a Java application.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "But I have always been puzzled about where to put my classes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are proponents for organizing the packages in a strictly domain oriented fashion, others separate by tier.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I myself have always had problems with a) with naming, b) with placing",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where do you put your domain specific constants (and what is the best name for such a class)?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where do you put classes for stuff which is both infrastructural and domain specific (for instance I have a FileStorageStrategy class, which stores the files either in the database, or alternatively in database)?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where to put Exceptions?",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Are there any standards to which I can refer?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Class names should always be descriptive and self-explanatory.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you have multiple domains of responsibility for your classes then they should probably be refactored.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Likewise for you packages.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "They should be grouped by domain of responsibility.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Every domain has it's own exceptions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Generally don't sweat it until you get to a point where it is becoming overwhelming and bloated.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then sit down and don't code, just refactor the classes out, compiling regularly to make sure everything works.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": " Then continue as you did before.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use packages to group related functionality together.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Usually the top of your package tree is your domain name reversed (com.domain.subdomain) to guarantee uniqueness, and then usually there will be a package for your application.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then subdivide that by related area, so your FileStorageStrategy might go in, say, com.domain.subdomain.myapp.storage, and then there might be specific implementations/subclasses/whatever in com.domain.subdomain.myapp.storage.file and com.domain.subdomain.myapp.storage.database.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "These names can get pretty long, but import keeps them all at the top of files and IDEs can help to manage that as well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Exceptions usually go in the same package as the classes that throw them, so if you had, say, FileStorageException it would go in the same package as FileStorageStrategy.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Likewise an interface defining constants would be in the same package.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's not really any standard as such, just use common sense, and if it all gets too messy, refactor!",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing I've done in the past - if I'm extending a class I'll try and follow their conventions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example, when working with the Spring Framework, I'll have my MVC Controller classes in a package called com.mydomain.myapp.web.servlet.mvc",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I'm not extending something I just go with what is simplest. com.mydomain.domain for Domain Objects (although if you have a ton of domain objects this package could get a bit unwieldy).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For domain specific constants, I actually put them as public constants in the most related class.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Some shops make a separate Constants class but I don't see the value in lumping unrelated numbers and strings into a single class.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've seen some other shops try to solve this problem by creating SEPARATE Constants classes, but that just seems like a waste of time and the result is too confusing.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Using this setup, a large project with multiple developers will be duplicating constants all over the place.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I like break my classes down into packages that are related to each other.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Model For database related calls",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "View Classes that deal with what you see",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Control Core functionality classes",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Util Any misc. classes that are used (typically static functions) etc.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think keep it simple and don't over think it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Don't over abstract and layer too much.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Just keep it neat, and as it grows, refactoring it is trivial.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the best features of IDEs is refactoring, so why not make use of it and save you brain power for solving problems that are related to your app, rather then meta issues like code organisation.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm a huge fan of organized sources, so I always create the following directory structure:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In /src I'm using the default Java patterns:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Package names starting with your domain (org.yourdomain.yourprojectname) and class names reflecting the OOP aspect you're creating with the class (see the other commenters).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Common package names like util, model, view, events are useful, too.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I tend to put constants for a specific topic in an own class, like SessionConstants or ServiceConstants in the same package of the domain classes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've really come to like Maven's Standard Directory Layout.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the key ideas for me is to have two source roots - one for production code and one for test code like so:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(here, both src/main/java and src/test/java are source roots).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Advantages:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Your tests have package (or \"default\") level access to your classes under test.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can easily package only your production sources into a JAR by dropping src/test/java as a source root.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "One rule of thumb about class placement and packages:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Generally speaking, well structured projects will be free of circular dependencies.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Learn when they are bad (and when they are not), and consider a tool like JDepend or SonarJ that will help you eliminate them.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing that I found very helpful for unit tests was to have a myApp/src/ and also myApp/test_src/ directories.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This way, I can place unit tests in the same packages as the classes they test, and yet I can easily exclude the test cases when I prepare my production installation.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Short answer:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "draw your system architecture in terms of modules, drawn side-by-side, with each module sliced vertically into layers (e.g. view, model, persistence).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then use a structure like com.mycompany.myapp.somemodule.somelayer, e.g. com.mycompany.myapp.client.view or com.mycompany.myapp.server.model.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Using the top level of packages for application modules, in the old-fashioned computer-science sense of modular programming, ought to be obvious.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, on most of the projects I have worked on we end up forgetting to do that, and end up with a mess of packages without that top-level structure.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This anti-pattern usually shows itself as a package for something like 'listeners' or 'actions' that groups otherwise unrelated classes simply because they happen to implement the same interface.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Within a module, or in a small application, use packages for the application layers.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Likely packages include things like the following, depending on the architecture:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "com.mycompany.myapp.view\ncom.mycompany.myapp.model\ncom.mycompany.myapp.services\ncom.mycompany.myapp.rules\ncom.mycompany.myapp.persistence (or 'dao' for data access layer)\ncom.mycompany.myapp.util (beware of this being used as if it were 'misc')",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Within each of these layers, it is natural to group classes by type if there are a lot.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A common anti-pattern here is to unnecessarily introduce too many packages and levels of sub-package so that there are only a few classes in each package.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where I'm working, we're using Maven 2 and we have a pretty nice archetype for our projects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The goal was to obtain a good separation of concerns, thus we defined a project structure using multiple modules (one for each application 'layer'):",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- common: common code used by the other layers (e.g., i18n)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- entities: the domain entities",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- repositories: this module contains the daos interfaces and implementations",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- services-intf: interfaces for the services (e.g, UserService, ...)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- services-impl: implementations of the services (e.g, UserServiceImpl)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- web: everything regarding the web content (e.g., css, jsps, jsf pages, ...)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- ws: web services",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Each module has its own dependencies (e.g., repositories could have jpa) and some are project wide (thus they belong in the common module).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Dependencies between the different project modules clearly separate things (e.g., the web layer depends on the service layer but doesn't know about the repository layer).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Each module has its own base package, for example if the application package is \"com.foo.bar\", then we have:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Each module respects the standard maven project structure:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unit tests for a given layer easily find their place under \\src\\test.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Everything that is domain specific has it's place in the entities module.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Now something like a FileStorageStrategy should go into the repositories module, since we don't need to know exactly what the implementation is.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In the services layer, we only know the repository interface, we do not care what the specific implementation is (separation of concerns).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are multiple advantages to this approach:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "clear separation of concerns",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "each module is packageable as a jar (or a war in the case of the web module) and thus allows for easier code reuse (e.g., we could install the module in the maven repository and reuse it in another project)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "maximum independence of each part of the project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I know this doesn't answer all your questions, but I think this could put you on the right path and could prove useful to others.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Searching for some sample code for converting a point in WGS84 coordinate system to a map position in Google Maps (pixel position), also supporting zoom levels.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If the codes is well commented, then it can also be in some other language.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can also point me to a open source Java project :)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Some resources found:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "OpenLayer implementation.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "JOSM project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Excellent Java Map Projection Library from JH LABS.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "This is a pure java PROJ.4 port.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Does projection from WGS84 to meters.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From there it's quite straightforward to convert meters to tile pixels.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Someone took the javascript code from Google Maps and ported it to python:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used this and it works great.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "GeoTools has code to transform to and from about any coordinate system you could imagine, and among them also Google Map's.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's also open source.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, it should also be pointed out that GeoTools is a large library, so if you're looking something small, quick and easy, it's likely not the way to go.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I would highly recommend it though if you're going to do other GIS/coordinate transformations, etc. as well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you use GeoTools or something similar, you might also be interested in knowing that the Google Map coordinate system is called EPSG 3785.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Tile utility code in Java on mapki.com (great resource for google map developers)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the best way to verify/test that a text string is serialized to a byte array with a certain encoding?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In my case, I want to verify that an XML structure is serialized to a byte array with the UTF-8 encoding which is of variable character length.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As an example, my current ugly procedure is to inject a character known to require two bytes into the structure before serializing, then replacing the two-byte character with an ASCII character and comparing the serialized array lengths.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This should yield two serialized arrays where the array containing the two-byte characters should have length +1.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Plus if the solution is elegant for Java.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I can't think of any elegant way to seek for a byte sequence in a byte array.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "(Could be used to seek for a known byte sequence representing the desired character representation in UTF-8.)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Perhaps you could deserialise the byte array using a known encoding and ensure that (a) it doesn't throw any exceptions, and (b) deserialises to the original string.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "It seems that from your description of the scenario, you may not have the original string readily available.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Might there be a way to create it?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That's good.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "You're right, I don't have the original string, since I'm testing a module that creates an XML document as a byte array.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I didn't think about deserializing to a String with an expected encoding.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That will do the trick.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I am writing an application in Java for the desktop using the Eclipse SWT library for GUI rendering.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think SWT helps Java get over the biggest hurdle for acceptance on the desktop: namely providing a Java application with a consistent, responsive interface that looks like that belonging to any other app on your desktop.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, I feel that packaging an application is still an issue.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "OS X natively provides an easy mechanism for wrapping Java apps in native application bundles, but producing an app for Windows/Linux that doesn't require the user to run an ugly batch file or click on a .jar is still a hassle.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Possibly that's not such an issue on Linux, where the user is likely to be a little more tech-savvy, but on Windows I'd like to have a regular .exe for him/her to run.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Has anyone had any experience with any of the .exe generation tools for Java that are out there?  I've tried JSmooth but had various issues with it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is there a better solution before I crack out Visual Studio and roll my own?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit:  I should perhaps mention that I am unable to spend a lot of money on a commercial solution.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Install4J. Not free, but worth it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Give the trial a shot",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I went through the same and found that all of the free options weren't very good. Looks like you'll be writing your own.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I'd be interested to see if someone has a free/cheap option that works",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Have you thought about Java Web Start?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here is a tutorial specifically for deploying an SWT application with Java Web Start.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Maybe you should take a look at IzPack.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I created a very nice installer some years ago and I'd bet that they are still improving it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It allows the installation of docs, binaries and a clickable link to start the application IIRC.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Have you considered writing a small program in C/C++ that just calls CreateProcess to start up the java VM with the jar (or class) file?\nYou could get Visual C++ Express and put together the startup program pretty easily.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This would make it easy to add a friendly icon as well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another option I was considering: rather than writing a native launcher from scratch, Eclipse comes with the source code for its own launcher, and this could perhaps be repurposed for my app.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's a shame that Sun never included anything similar in the JDK.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used the free Launch4J to create a custom launcher for my Java programs on Windows.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Combined with the free NSIS Installer you can build a nice package for your Windows users.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit: Did not see that you use SWT.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Don't know if it works with SWT as well, because I used only Swing in my apps.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In my company we use Launch4J to create the exe file, and NSIS to create the installer, with SWT applications.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We have used it for years in several commercial applications and the pair works fine.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },

      {
        "pos": "Another vote for Launch4J, just wrote an ant task this morning to integrate with one of my projects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Seems to work really well\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Consider converting your application to Eclipse RCP.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It is written in SWT, and the Eclipse IDE contains packaging tools that generate executables for all major platforms.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"For windows, it can generate a zip or a folder containing your code.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"For a common installation experience, I'd using NSIS.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"There is actually a packages generator project at eclipse to create common installers for all platforms eclipse supports.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "To follow up on pauxu's answer, I'm using launch4j and NSIS on a project of mine and thought it would be helpful to show just how I'm using them.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Here's what I'm doing for Windows.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"BTW, I'm creating .app and .dmg for Mac, but haven't figured out what to do for Linux yet.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Project Copies of launch4j and NSIS\nIn my project I have a \"vendor\" directory and underneath it I have a directory for \"launch4j\" and \"nsis\".",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Within each is a copy of the install for each application.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I find it easier to have a copy local to the project rather than forcing others to install both products and set up some kind of environment variable to point to each.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Script Files\nI also have a \"scripts\" directory in my project that holds various configuration/script files for my project.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"First there is the launch4j.xml file:\n\nAnd then there's the NSIS script rpgam-setup.nsis.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It can take a VERSION argument to help name the file.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nAnt Integration\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I have some targets in my Ant buildfile (build.xml) to handle the above.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"First I tel Ant to import launch4j's Ant tasks:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nI then have a simple target for creating the wrapper executable:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nAnd another target for making the installer:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nThe top portion of that just copies the necessary files for the installer to a temporary location and the second half executes the script that uses all of it to make the installer.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have used JSmooth in the past, and still have luck with it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The UI is pretty buggy, but I only use that for building the config file once, and then I build from Ant after that.\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos":"What issues are you having with JSmooth?\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "I have read through several reviews on Amazon and some books seem outdated.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I am currently using MyEclipse 6.5 which is using Eclipse 3.3.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I'm interested in hearing from people that have experience learning RCP and what reference material they used to get started.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Although I don't have personal experience, a few friends of mine did Eclipse RCP development, and they used the book \"Eclipse Rich Client Platform: Designing, Coding, and Packaging Java(TM) Applications\".",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"They seemed to like it a lot, and I looked it at myself, and it seemed useful.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"If I was going to do RCP development on Eclipse, I would probably get this book.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"To clarify - this book is geared toward Eclipse 3.1, and since I haven't done any RCP development of my own, I'm not sure how much things have changed.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I read the book suggested by Thomas and it's really worth reading, although not very up-to-date.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I've been doing Eclipse RCP development for almost 2 years now.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"When I first started, I wanted a book for help and many people told me, with Eclipse you're better off using the Eclipsepedia and Google.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"However, I started with \"The Java Developer's Guide to Eclipse\" by D'Anjou et al, and I still reference it when I need a better starting point or a good reference.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"It's probably a little outdated now, but is very thorough and really explains how the Eclipse framework works.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Like just about anything, RCP isn't too hard to pick up if you've figured out how the framework supporting it works and you'll get a lot more mileage out of your code.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I agree with Thomas Owens on \"Eclipse Rich Client Platform: Designing, Coding, and Packaging Java(TM) Applications\" and would also add \"Eclipse: Building Commercial-Quality Plug-ins\" to the list of rather outdated but still somewhat useful books on Eclipse RCP. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Even though the latter does not go much into the Rich Client Platform, it explains quite a lot about the Eclipse plug-in architecture that is useful knowledge for developers of RCP applications.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"There has been a lot of improvements in the Eclipse RCP platform since the release of both of these books, so I really hope that there are new versions of these books coming out soon.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "At my work we are running a group of tests that consist of about 3,000 separate test cases. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Previously we were running this entire test suite on one machine, which took about 24-72 hours to complete the entire test run.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"We now have created our own system for grouping and distributing the tests among about three separate machines and the tests are prioritized so that the core tests get run first for more immediate results and the extra tests run when there is an available machine.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I am curious if anyone has found a good way to distribute their tests among several machines to reduce total test time for a complete run and what tools were used to achieve that.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I've done some research and it looks like TestNG is moving in this direction, but it looks like it is still under quite a bit of development. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"We don't plan on rewriting any of our tests, but as we add new tests and test new products or add-ons I'd like to be able to deal with the fact that we are working with very large numbers of tests.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"On the other hand, if we can find a tool that would help distribute our Junit 3.x tests even in a very basic fashion, that would be helpful since we wouldn't have to maintain our own tooling to do that.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've seen some people having a play with distributed JUnit.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I can't particularly vouch for how effective it is, but the other teams I've seen seemed to think it was straight forward enough.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Hope that helps.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Our build people use Mozilla Tinderbox.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It seems to have some hooks for distributed testing.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I'm sorry not to know the details but I thought I would at least pass on the pointer to you.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It's also nice coz you can find out immediately when a build breaks, and what checkin might have been the culprit.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"http://www.mozilla.org/tinderbox.html\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's also parallel-junit.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Depending on how you currently execute your tests its convenience may vary - the idea is just to multithread on a single system that has multiple cores.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I've played with it briefly, but it's a change from how we currently run our tests. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Hudson, the continuous integration engine I use, also has some ways to distribute test running (separate jobs aggregated results in one).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I need to prevent Session Fixation, a particular type of session hijacking, in a Java web application running in JBoss. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"However, it appears that the standard idiom doesn't work in JBoss. ",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Can this be worked around?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This defect (found here) points the way to the solution.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos":"The Tomcat instance that runs in JBoss is configured with emptySessionPath=\"true\", rather than \"false\", which is the default.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"This can be modified in .../deploy/jboss-web.deployer/server.xml; both the HTTP and AJP connectors have this option.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The feature itself is used to eliminate the context path (eg. \"foo\" in http://example.com/foo) from being included in the JSESSIONID cookie.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Setting it to false will break applications that rely on cross-application authentication, which includes stuff built using some portal frameworks.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It didn't negatively affect the application in question, however.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm currently trying to get into the Java EE development with the Spring framework.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"As I'm new to Spring, it is hard to imaging how a good running project should start off.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Do you have any best practices, tipps or major DO NOTs for a starter?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"How did you start with Spring - big project or small tutorial-like applications?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":" Which technology did you use right away: AOP, complex Hibernate...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Whilst its been years since I have used spring, and I can't say I am a fan of it, I know that the App Fuse tool (https://java.net/projects/appfuse/) has been helpful to help people bootstrap in terms of generating all the artifacts you need to get going.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Focus first on the heart of Spring: Dependency Injection.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Once you see all the ways that DI can be used, then start thinking about the more interesting pieces like AOP, Remoting, JDBC Templates etc.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"So my best bit of advice is let your use of Spring grow out from the core.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Best practice?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"If you're using the standard XML config, manage the size of individual files and comment them judiciously.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"You may think that you and others will perfectly understand your bean definitions, but in practice they're somewhat harder to come back to than plain old java code.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Good luck!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I actually quite liked Spring.. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"It was a fresh breeze of air in your average J2EE Java Beans..\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"I recommend implementing the example Spring provides:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nhttp://static.springframework.org/docs/Spring-MVC-step-by-step/\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Also, I decided to go full monty and added Hibernate to my Spring application ;), because Spring provides excellent support for Hibernate... :)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"I do have a DON'T however, which I learned the hard way (product in production)...",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"If you only implement the Controller interface, and return a ModelAndView object with some data as provided with the interface, Spring does garbadge collect those resources, for tries to cache those data.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"So be careful to put large data in those ModelAndView objects, because they will hog up your server memory for as long as the server is in the air as soon as that page has been viewed...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A good way to get started is to concentrate on the \"Springframework\".",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The Spring portfolio has grown to a big pile of projects around various aspects of Enterprise Software.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Stick to the core at the beginning and try to grasp the concepts.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Download the latest binaries and check out Spring's petclinic example once you are familiar with the core.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It gives quite a good overview of the various projects SpringSource has to offer.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Although the documentation is very good, I'd recommend a book after you grasp the concepts of the core.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"What I've found problematic with the documentation, is that it's not in depth and can't give you all the details you need.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "Spring is also very much about unit testing and therefore testability of your classes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"That basically means thinking about modularization, separation of concerns, referencing a class through interfaces etc.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you're just looking to dabble in it a bit and see if you like it, I recommend starting with the DAO layer, using Spring's JDBC and/or Hibernate support.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"This will expose you to a lot of the core concepts, but do so in a way that is easy to isolate from the rest of your app.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"This is the route I followed, and it was good warm-up before getting into building a full application with Spring.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Start here - I actually think it's among the best Software Dev books that I've read.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"\nExpert Spring MVC And Web Flow\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Learn the new Annotation-based configuration for MVC classes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"This is part of Spring 2.5.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Using Annotation-based classes is going to make writing Unit tests a heck of a lot easier.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Also being able to cut down on the amount of XML is a good thing.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Oh yeah Unit Tests - if you're using Spring, you BETTER be Unit Testing. :)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Write Unit tests for all of your Web and Service Layer classes. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Read up on Domain Driven Design.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The fact that you can use Domain Object classes at all levels of a Spring Application means you're going to have a VERY powerful Domain Model.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Leverage it.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"However, when using your Domain Object classes for form population, you will want to take heed of the recent security concerns around the Spring Framework.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"A discussion on the Server Side reveals the way to close the hole in the comments.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Small tip - I've found it helpful to modularize and clearly label my Spring xml context files based on application concern.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Here's an example for a web app I worked on:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nMyProject / src / main / resources / spring /\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\ndatasource.xml  -  My single data source bean.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\npersistence.xml  -  My DAOs/Repositories.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Depends on datasource.xml beans.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"services.xml  -  Service layer implementations.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"These are usually the beans to which I apply transactionality using AOP.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Depends on persistence.xml beans.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"controllers.xml  - My Spring MVC controllers.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Depends on services.xml beans.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"views.xml - My view implementations.\n\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"This list is neither perfect nor exhaustive, but I hope it illustrates the point.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Choose whatever naming strategy and granularity works best for you.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"In my (limited) experience, I've seen this approach yeild the following benefits:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":" Clearer architecture\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Clearly named context files gives those unfamiliar with your project structure a reasonable \nplace to start looking for bean definitions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Can make detecting circular/unwanted dependencies a little easier.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Helps domain design\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"If you want to add a bean definition, but it doesn't fit well in any of your context files, perhaps there's a new concept or concern emerging?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Examples:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nSuppose you want to make your Service layer transactional with AOP.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Do you add those bean definitions to services.xml, or put them in their own transactionPolicy.xml?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Talk it over with your team.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Should your transaction policy be pluggable?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Add Acegi/Spring Security beans to your controllers.xml file, or create a security.xml context file?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Do you have different security requirements for different deployments/environments?\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Integration testing\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"You can wire up a subset of your application for integration testing (ex: given the above files, to test the database you need to create only datasource.xml and persistence.xml beans).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":" Specifically, you can annotate an integration test class as such:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nWorks well with Spring IDE's Beans Graph\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Having lots of focused and well-named context files makes it easy to create custom BeansConfigSets to visualize the layers of your app using Spring IDE's Beans Graph.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"I've used this before to give new team members a high-level overview of our application's organization.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Can anyone recommend a good binary XML format?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It's for a JavaME application, so it needs to be a) Easy to implement on the server, and b) Easy to write a low-footprint parser for on a low-end JavaME client device.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"And it goes without saying that it needs to be smaller than XML, and faster to parse.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nThe data would be something akin to SVG.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What kind of data are you planning to use? ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I would say, that if the server is also done in Java, easiest way for small footprint is to send/receive binary data in predefined format.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Just write everything in known order into DataOutputStream.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"But it would really depend, what what kind of data are you working on and can you define the format.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Actually you should evaluate, if this kind of optimization is even needed.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Maybe you target devices are not so limited.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You might want to take a look at wbxml (Wireless Binary XML) it is optimized for size, and often used on mobile phones, but it is not optimized for parsing speed.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It very much depends on the target device. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"If you have JSR172 available, then you are done with the parsing, the runtime does it for you.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"And XML is mainly about making your own format.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"As was alredy stated if your goal is performance, than XML is probably not the best way to go and you will end up doing some binary stuff.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hessian might be an alternative worth looking at.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"It is a small protocol, well-suited for Java ME applications.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\n\"Hessian is a binary web service protocol that makes web services usable without requiring a large framework, and without learning a new set of protocols.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Because it is a binary protocol, it is well-suited to sending binary data without any need to extend the protocol with attachments.\"\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"More links:\nhttp://hessian.caucho.com/\nhttp://www.nubius.be/info-software/hessian4j.html\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We need to add WorkFlow to our Spring managed application.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Does anyone have any useful experience in using any of the myriad of OSS Work Flow solutions?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Which one is best?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Which one integrates with Spring best?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Which ones should we avoid?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you only need some simple process orchestration, Spring's own Web Flow, despite its name can serve as a orchestration task manager.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"If you need to preserve state for several days then you will need to become an 'early adopter' of one of the open-source projects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"You may want to look at Eclipse's BPEL project.  \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":" My hunch is that once a clearer picture of the BPEL/BPM/Workflow space emerges you will see Spring provide an abstraction layer the same way they have for JDBC, Transactions, ORM frameworks etc... \n ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We're looking at Drools/Guvnor, possibly integrated with jBPM (as in this presentation), to add a workflow engine to our Spring/Java EE app, but we're still in the very early phases of trying it out.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I second Spring Web Flow.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Depending on how complex the process is, Web Flow is great for managing various states and I've found that it's pretty easy to pick up and there's a good amount of documentation out there for it.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Like Brian said if you're doing anything of great complexity you might look at using BPEL. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"There are a number of open source BPEL engines, one that comes to mind is Apache Orchestration Director Engine \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have a base class that represents a database test in TestNG, and I want to specify that all classes extending from this class are of a group \"db-test\", however I have found that this doesn't seem possible.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I have tried the @Test annotation:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nHowever, this doesn't work because the @Test annotation will try to make a bunch of methods into tests, and warnings/errors pop up in eclipse when the tests are run.\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos":"So I tried disabling the test, so at least the groups are assigned:\n\nbut then any @BeforeTest (and other similar annotations) ALSO get disabled... which is of course not what I want.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos":"I would like some way to annotate a class as being of a particular type of group, but it doesn't quite seem possible in TestNG.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos":"Does anyone have any other ideas?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not sure how the annotation inheritance works for TestNG but this article may be of some use. ",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"http://beust.com/weblog/archives/000170.html. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Actually, this may help better http://testng.org/doc/documentation-main.html#annotations, look at inheritGroups.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG will run all the public methods from a class with a @Test annotation. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Maybe you could change the methods you don't want TestNG to run to be non-public\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can specify the @Test annotation at method level that allows for maximum flexibility.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"\nDoes this works for you or I am missing something from your question.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It would seem to me as the following code-challenge (community wiki post):\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"How to be able to execute all test methods of Extended class from the group 'aGlobalGroup' without:\n\nspecifying the 'aGlobalGroup' group on the Extended class itself ?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"testing non-annotated public methods of Extended class ?\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },{
        "pos":"\nThe first answer is easy:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"add a class TestNG(groups = { \"aGlobalGroup\" }) on the Base class level\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"That group will apply to all public methods of both Base class and Extended class.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"BUT: even non-testng public methods (with no TestNG annotation) will be included in that group.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"CHALLENGE: avoid including those non-TestNG methods.\n\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The answer is through a custom org.testng.IMethodSelector:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Its includeMethod() can exclude any method we want, like a public not-annotated method.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"However, to register a custom Java MethodSelector, you must add it to the XMLTest instance managed by any TestRunner, which means you need your own custom TestRunner.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"But, to build a custom TestRunner, you need to register a TestRunnerFactory, through the -testrunfactory option.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"BUT that -testrunfactory is NEVER taken into account by TestNG class... so you need also to define a custom TestNG class :\n\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"in order to override the configure(Map) method, \nso you can actually set the TestRunnerFactory\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"TestRunnerFactory which will build you a custom TestRunner,\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"TestRunner which will set to the XMLTest instance a custom XMLMethodSelector\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"XMLMethodSelector which will build a custom IMethodSelector\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"IMethodSelector which will exclude any TestNG methods of your choosing!\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Ok...",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"it's a nightmare.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos":"But it is also a code-challenge, so it must be a little challenging ;)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"All the code is available at DZone snippets.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"As usual for a code challenge:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"one java class (and quite a few inner classes)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":" copy-paste the class in a 'source/test' directory (since the package is 'test')\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"run it (no arguments needed)\n\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Update from Mike Stone:\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I'm going to accept this because it sounds pretty close to what I ended up doing, but I figured I would add what I did as well.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Basically, I created a Groups annotation that behaves like the groups property of the Test (and other) annotations.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Then, I created a GroupsAnnotationTransformer, which uses IAnnotationTransformer to look at all tests and test classes being defined, then modifies the test to add the groups, which works perfectly with group exclusion and inclusion.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Modify the build to use the new annotation transformer, and it all works perfectly!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"Well...",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"the one caveat is that it doesn't add the groups to non-test methods...",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"because at the time I did this, there was another annotation transformer that lets you transform ANYTHING, but it somehow wasn't included in the TestNG I was using for some reason...",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"so it is a good idea to make your before/after annotated methods to alwaysRun=true...which is sufficient for me.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The end result is I can do:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"And I made the transformer work with subclassing and everything.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I'd like to utilize an ICE Faces fileInput control to fill in the file path & file name for the input to an input field on a web page based on file that the user selects. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"How can I capture these properties without actually performing any file transfer operations?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I believe that the real answer is that you can't.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The file path won't be sent by the browser for security reasons.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":" The file name will be sent, however I don't believe it gets sent without an actual upload.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"The closest you could come, afaik, would be to forcibly kill the connection just when the upload starts.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"That would net you the filename with little actual transferred data, but it doesn't sound like it would be useful to you.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Alternatively, a signed Java applet might get you closer to a solution that you'd want.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What's the best way to make a linked list in Java?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Java has a LinkedList implementation, that you might wanna check out.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"You can download the JDK and it's sources at java.sun.com.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use java.util.LinkedList. ",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Like this:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The obvious solution to developers familiar to Java is to use the LinkedList class already provided in java.util.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Say, however, you wanted to make your own implementation for some reason.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Here is a quick example of a linked list that inserts a new link at the beginning of the list, deletes from the beginning of the list and loops through the list to print the links contained in it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Enhancements to this implementation include making it a double-linked list, adding methods to insert and delete from the middle or end, and by adding get and sort methods as well. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Note: In the example, the Link object doesn't actually contain another Link object -  nextLink is actually only a reference to another link. \n\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am having a strange DB2 issue when I run DBUnit tests.  ",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos":"My DBUnit tests are highly customized, but I don't think it is the issue.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"When I run the tests, I get a failure: \n\nSQLCODE: -1084, SQLSTATE: 57019\n\nwhich translates to \n\nSQL1084C Shared memory segments cannot be allocated.\n\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 2
    },
    {
        "pos":"It sounds like a weird memory issue, though here's the big strange thing.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"If I ssh to the test database server, then go in to db2 and do \"connect to MY_DB\", the tests start succeeding!",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"This seems to have no relation to the supposed memory error that is being reported.\n",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos":"I have 2 tests, and the first one actually succeeds, the second one is the one that fails.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"However, it fails in the DBUnit setup code, when it is obtaining the connection to the DB server to load my xml dataset.\n",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos":"Any ideas what might be going on?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Well, I think I fixed it by doing the following:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos":"At least, things seem to be working now.....\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I'm currently trying to read in an XML file, make some minor changes (alter the value of some attributes), and write it back out again.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"I have intended to use a StAX parser (javax.xml.stream.XMLStreamReader) to read in each event, see if it was one I wanted to change, and then pass it straight on to the StAX writer (javax.xml.stream.XMLStreamReader) if no changes were required.\n",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"Unfortunately, that doesn't look to be so simple - The writer has no way to take an event type and a parser object, only methods like writeAttribute and writeStartElement.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos":"Obviously I could write a big switch statement with a case for every possible type of element which can occur in an XML document, and just write it back out again, but it seems like a lot of trouble for something which seems like it should be simple.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos":"Is there something I'm missing that makes it easy to write out a very similar XML document to the one you read in with StAX?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "After a bit of mucking around, the answer seems to be to use the Event reader/writer versions rather than the Stream versions.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"(i.e. javax.xml.stream.XMLEventReader and javax.xml.stream.XMLEventWriter)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos":"See also http://www.devx.com/tips/Tip/37795, which is what finally got me moving.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    }

]