[
    {
        "pos": "I've never tried it, but you should write a test case to see if reading from a stream after you have hit the end will work, regardless of if there is more data written to the file.\nIs there a reason you can't use a piped input/output stream?  Is the data being written and read from the same application (if so, you have the data, why do you need to read from the file)?\nOtherwise, maybe read till end of file, then monitor for changes and seek to where you left off and continue... though watch out for race conditions.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The answer seems to be \"no\" ... and \"yes\". There seems to be no real way to know if a file is open for writing by another application. So, reading from such a file will just progress until content is exhausted. I took Mike's advice and wrote some test code:\nWriter.java writes a string to file and then waits for the user to hit enter before writing another line to file. The idea being that it could be started up, then a reader can be started to see how it copes with the \"partial\" file. The reader I wrote is in Reader.java.\nWriter.java\n\nReader.java\n\nNo guarantees that this code is best practice.\nThis leaves the option suggested by Mike of periodically checking if there is new data to be read from the file. This then requires user intervention to close the file reader when it is determined that the reading is completed. Or, the reader needs to be made aware the content of the file and be able to determine and end of write condition. If the content were XML, the end of document could be used to signal this.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You might also take a look at java channel for locking a part of a file.\nhttp://java.sun.com/javase/6/docs/api/java/nio/channels/FileChannel.html\nThis function of the FileChannel might be a start\n\nAn invocation of this method will block until the region can be locked\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Could not get the example to work using FileChannel.read(ByteBuffer) because it isn't a blocking read. Did however get the code below to work:\n\nOf course the same thing would work as a timer instead of a thread, but I leave that up to the programmer. I'm still looking for a better way, but this works for me for now.\nOh, and I'll caveat this with: I'm using 1.4.2. Yes I know I'm in the stone ages still.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I want to convert a primitive to a string, and I tried:\n\nThis fails with the error:\n\nNow, I get that primitives are not reference types (ie, not an Object) and so cannot have methods.  However, Java 5 introduced autoboxing and unboxing (a la C#... which I never liked in C#, but that's beside the point).  So with autoboxing, I would expect the above to convert myInt to an Integer and then call toString() on that.\nFurthermore, I believe C# allows such a call, unless I remember incorrectly.  Is this just an unfortunate shortcoming of Java's autoboxing/unboxing specification, or is there a good reason for this?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Java autoboxing/unboxing doesn't go to the extent to allow you to dereference a primitive, so your compiler prevents it. Your compiler still knows myInt as a primitive.  There's a paper about this issue at jcp.org.\nAutoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa).\nSo unfortunately, you would have to do it like this: (kudos Patrick, I switched to your way)\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Ditto on what Justin said, but you should do this instead:\n\nIt saves an allocation or two and is more readable.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nseems like a shortcoming of the\n  specification to me\n\nThere are more shortcomings and this is a subtle topic. Check this out:\n\nHere \"long\" would be printed (haven't checked it myself), because the compiler choses widening over autoboxing. Be careful when using autoboxing or don't use it at all!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One other way to do it is to use:\n\nThis method is overloaded for every primitive type and Object. This way you don't even have to think about the type you're using. Implementations of the method will call the appropriate method of the given type for you, e.g. Integer.toString(myInt).\nSee http://java.sun.com/javase/6/docs/api/java/lang/String.html.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In C#, integers are neither reference types nor do they have to be boxed in order for ToString() to be called. They are considered objects in the Framework (as a ValueType, so they have value semantics), however. In the CLR, methods on primitives are called by \"indirectly\" loading them onto the stack (ldind).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The valid syntax closest to your example is\n\nWhen the compiler finishes, that's equivalent to\n\nHowever, this doesn't perform as well as the conventional usage, String.valueOf(myInt), because, except in special cases, it creates a new Integer instance, then immediately throws it away, resulting in more unnecessary garbage. (A small range of integers are cached, and access by an array access.) Perhaps language designers wanted to discourage this usage for performance reasons.\nEdit: I'd appreciate it if the downvoter(s) would comment about why this is not helpful.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Example: I have two shared objects (same should apply to .dlls). The first shared object is from a third-party library, we'll call it libA.so. I have wrapped some of this with JNI and created my own library, libB.so. Now libB depends on libA.\nWhen webstarting, both libraries are places in some webstart working area. My java code attempts to load libB. At this point the system loader will attempt to load libA which is not in the system library path (java.library.path won't help this). The end result is that libB has an unsatisfied link and cannot be used. \nI have tried loading libA before libB, but that still does not work. Seems the OS wants to do that loading for me. Is there any way I can make this work other than statically  compiling?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not sure if this would be handled exactly the same way for webstart, but we ran into this situation in a desktop application when dealing with a set of native libraries (dlls in our case).\nLoading libA before libB should work, unless one of those libraries has a dependency that is unaccounted for and not in the path. My understanding is that once it gets to a system loadLibrary call (i.e. Java has found the library in its java.library.path and is now telling the OS to load it) - it is completely dependent on the operating system to find any dependent libraries, because at that point it is the operating system that is loading the library for the process, and the OS only knows how to look in the system path. That seems hard to set in the case of a Webstart app, but there is a way around this that does not involve static compiling. You may be able to shuffle where your libraries are - I am unsure \nIf you use a custom classloader, you can override loadLibrary and findLibrary so that it can locate your libraries from within a jar in your classpath, and if you also make it aware of your native library dependencies (i.e. libB depends on libA depends on libX, then when loading libB you can catch yourself and ensure you load libA first, and in checking that notice and load libX first. Then the OS doesn't try to find a library that isn't in your path. It's klunky and a bit painful, but ensuring Java finds them and loads them all in the correct order can work.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Are both native libraries packaged into a signed jar which is listed as\n\nIn the JNLP file?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I saw this in an answer to another question, in reference to shortcomings of the java spec:\n\nThere are more shortcomings and this is a subtle topic. Check this out:\n\nHere \"long\" would be printed (haven't checked it myself), because the compiler choses >widening over autoboxing. Be careful when using autoboxing or don't use it at all!\n\nAre we sure that this is actually an example of widening instead of autoboxing, or is it something else entirely?\nOn my initial scanning, I would agree with the statement that the output would be \"long\" on the basis of i being declared as a primitive and not an object.  However, if you changed \n\nto\n\nthe output would print \"Integer\"\nWhat's really going on here?  I know nothing about the compilers/bytecode interpreters for java...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Yes it is, try it out in a test.  You will see \"long\" printed.  It is widening because Java will choose to widen the int into a long before it chooses to autobox it to an Integer, so the hello(long) method is chosen to be called.\nEdit: the original post being referenced.\nFurther Edit: The reason the second option would print Integer is because there is no \"widening\" into a larger primitive as an option, so it MUST box it up, thus Integer is the only option.  Furthermore, java will only autobox to the original type, so it would give a compiler error if you leave the hello(Long) and removed hello(Integer).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In the first case, you have a widening conversion happening. This can be see when runinng the \"javap\" utility program (included w/ the JDK), on the compiled class:\n\nClearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction. See reference here.\nAnd in the other case, replacing the \"long x\" with the object \"Long x\" signature, you'll have this code in the main method:\n\nSo you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another interesting thing with this example is the method overloading. The combination of type widening and method overloading only working because the compiler has to make a decision of which method to choose. Consider the following example:\n\nIt doesn't use the run-time type which is List, it uses the compile-time type which is Collection and thus prints \"Collection\". \nI encourage your to read Effective Java, which opened my eyes to some corner cases of the JLS.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the Java equivalent of PHP's $_POST? After searching the web for an hour, I'm still nowhere closer.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Your HttpServletRequest object has a getParameter(String paramName) method that can be used to get parameter values.  http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "POST variables should be accessible via the request object: HttpRequest.getParameterMap(). The exception is if the form is sending multipart MIME data (the FORM has enctype=\"multipart/form-data\"). In that case, you need to parse the byte stream with a MIME parser. You can write your own or use an existing one like the Apache Commons File Upload API.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here's a simple example. I didn't get fancy with the html or the servlet, but you should get the idea.\nI hope this helps you out.\n\nNow for the Servlet\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, in Java, the first line of your constructor HAS to be a call to super... be it implicitly calling super(), or explicitly calling another constructor.  What I want to know is, why can't I put a try block around that?\nMy specific case is that I have a mock class for a test.  There is no default constructor, but I want one to make the tests simpler to read.  I also want to wrap the exceptions thrown from the constructor into a RuntimeException.\nSo, what I want to do is effectively this:\n\nBut Java complains that super isn't the first statement.\nMy workaround:\n\nIs this the best workaround?  Why doesn't Java let me do the former?\n\nMy best guess as to the \"why\" is that Java doesn't want to let me have a constructed object in a potentially inconsistent state... however, in doing a mock, I don't care about that.  It seems I should be able to do the above... or at least I know that the above is safe for my case... or seems as though it should be anyways.\nI am overriding any methods I use from the tested class, so there is no risk that I am using uninitialized variables.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, compilers can't work on theoretical principles, and even though you may know that it is safe in your case, if they allowed it, it would have to be safe for all cases.\nIn other words, the compiler isn't stopping just you, it's stopping everyone, including all those that don't know that it is unsafe and needs special handling. There are probably other reasons for this as well, as all languages usually have ways to do unsafe things if one knows how to deal with them.\nIn C# .NET there are similar provisions, and the only way to declare a constructor that calls a base constructor is this:\n\nin doing so, the base constructor will be called before the body of the constructor, and you cannot change this order.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't know how Java is implemented internally, but if the constructor of the superclass throws an exception, then there isn't a instance of the class you extend.  It would be impossible to call the toString() or equals() methods, for example, since they are inherited in most cases.\nJava may allow a try/catch around the super() call in the constructor if 1. you override ALL methods from the superclasses, and 2. you don't use the super.XXX() clause, but that all sounds too complicated to me.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I can't presume to have a deep understanding of Java internals, but it is my understanding that, when a compiler needs to instantiate a derived class, it has to first create the base (and its base before that(...)) and then slap on the extensions made in the subclass. \nSo it is not even the danger of uninited variables or anything like that at all. When you try to do something in the subclass' constructor before the base class' constructor, you are basically asking the compiler to extend a base object instance that doesn't exist yet.\nEdit:In your case, MyClass becomes the base object, and MyClassMock is a subclass.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's done to prevent someone from creating a new SecurityManager object from untrusted code.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I just saw a comment of suggesting J#, and it made me wonder... is there a real, beneficial use of J# over Java?  So, my feeling is that the only reason you would even consider using J# is that management has decreed that the company should jump on the Java bandwagon... and the .NET bandwagon.  If you use J#, you are effectively losing the biggest benefit of picking Java... rich cross platform support.  Sure there is Mono, but it's not as richly supported or as full featured right?  I remember hearing Forms are not fully (perhaps at all) supported.\nI'm not trying to bash .NET here, I'm just saying, if you are going to go the Microsoft route, why not just use C#?  If you are going to go the Java route, why would J# enter the picture?\nI'm hoping to find some real world cases here, so please especially respond if you've ACTUALLY used J# in a REAL project, and why.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "J# is no longer included in VS2008. Unless you already have J# code, you should probably stay away.\nFrom j# product page:\n\nSince customers have told us that the\n  existing J# feature set largely meets\n  their needs and usage of J# is\n  declining, Microsoft is retiring the\n  Visual J# product and Java Language\n  Conversion Assistant tool to better\n  allocate resources for other customer\n  requirements. The J# language and JLCA\n  tool will not be available in future\n  versions of Visual Studio. To preserve\n  existing customer investments in J#,\n  Microsoft will continue to support the\n  J# and JLCA technology that shipped\n  with Visual Studio 2005 through to\n  2015 as per our product life-cycle\n  strategy. For more information, see\n  Expanded Microsoft Support Lifecycle\n  Policy for Business & Development\n  Products.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The whole purpose of J# is to ease the transition of Java developers to the .NET environment which didn't work so well (I guessing here) so Microsoft dropped J# from Visual Studio 2008.\nFor your question, \"Is there a real benefit of using J#?\"..\nin a nutshell... No..\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the killers I've found with J# in the past is that there is no built in support for referencing web services. That alone has been enough to deter me from it ever since.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "C# syntax is so close to Java (and better in some ways) that you might as well learn C# instead of J#.  And since C# is more widely used, you can easily find Java --> C# tutorials on google or check out http://www.asp.net/learn and watch some videos.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Instead of J#, I would rather prefer IKVM (http://www.ikvm.net/) to convert my JARs to .NET assemblies as well as access Java APIs in C#.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Strongly agree that syntactically C# beats Java hands down, so there is really no reason to lament the demise of j#.  Now trying to get c# compiling to Java bytecode might be an interesting move as Sun's hotspot jvm is great software.\nOr, for a bit of fun with what might well become the next generation of Java, how about Scala on the CLR...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't think it's a matter of which language is better. In the .NET world there are some inconsistencies between the libraries different languages provide. There are certain functionality that is available in VB.NET that you might like to use from C# but can't. I remember I had to use J# to use some ZIP libraries that were not available in any other language in .NET.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have used J# as an easy interim step to port a java library into C#.  It made for a good way to port code I don't plan to maintain from Java to .Net.  However, all new development is being done in C#.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've found many sources that talk about the automated Eclipse PDE process.  I feel these sources don't do a good job explaining what's going on.\nI can create the deployable package, in a semi-manual process via the Feature Export.  \nThe automated process requires knowledge of how the org.eclipse.pde.build scripts work.  I have gotten a build created, but not for JNLP.\nQuestions:\n\nHas anyone ever deployed RCP through JNLP?\nWere you able to automate the builds?\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I haven't done this before, but I found this site on the web giving an explanation.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is anyone successfully using the latest 64-bit Ganymede release of Eclipse on Windows XP or Vista 64-bit?\nCurrently I run the normal Eclipse 3.4 distribution on a 32bit JDK and launch & compile my apps with a 64bit JDK. Our previous experience has been that the 64bit Eclipse distro is unstable for us, so I'm curious if anyone is using it successfully.\nWe are using JDK 1.6.0_05.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've been successfully using it on Vista x64 for some light Java work.  Nothing too involved and no extra plugins, but basic Java coding has been working without any issues.  I'm using the 3.4M7 build but it looks like the 3.4 stable build supports Vista x64 now.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm using Eclipse with a 64bit VM. However I have to use Java 1.5, because with Java 1.6, even 1.6.0_10ea, Eclipse crashed when changing the .classpath-file. On Linux I had the same problems and could only get the 64bit Eclipse to work with 64bit Java 1.5.\nThe problem seems to be with the just in time compilation, since with vmparam -Xint eclipse works -- but this is not a sollution, because it's slow then.\nEdit:\nWith 1.6.0_11 it seems to work. \n1.6_10 final might work as well as mentioned in the comment, but I've not tested that.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am running a Tomcat application, and I need to display some time values.  Unfortunately, the time is coming up an hour off.  I looked into it and discovered that my default TimeZone is being set to:\n\nRather than the Pacific time zone.  This is further indicated when I try to print the default time zone's display name, and it comes up \"GMT-08:00\", which seems to indicate to me that it is not correctly set to the US Pacific time zone.  I am running on Ubuntu Hardy Heron, upgraded from Gutsy Gibbon.\nIs there a configuration file I can update to tell the JRE to use Pacific with all the associated daylight savings time information?  The time on my machine shows correctly, so it doesn't seem to be an OS-wide misconfiguration.\n\nOk, here's an update. A coworker suggested I update JAVA_OPTS in my /etc/profile to include \"-Duser.timezone=US/Pacific\", which worked (I also saw CATALINA_OPTS, which I updated as well). Actually, I just exported the change into the variables rather than use the new /etc/profile (a reboot later will pick up the changes and I will be golden).\nHowever, I still think there is a better solution... there should be a configuration for Java somewhere that says what timezone it is using, or how it is grabbing the timezone. If someone knows such a setting, that would be awesome, but for now this is a decent workaround.\n\nI am using 1.5, and it is most definitely a DST problem.  As you can see, the time zone is set to not use daylight savings.  My belief is it is generically set to -8 offset rather than the specific Pacific timezone.  Since the generic -8 offset has no daylight savings info, it's of course not using it, but the question is, where do I tell Java to use Pacific time zone when it starts up?  I'm NOT looking for a programmatic solution, it should be a configuration solution.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hmm... off by one hour. DST possibly?\nIs the date set correctly? \nWhat version of the JDK is this running on? (\"java -version\")\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's a \"quirk\" in the way the JVM looks up the zoneinfo file.  See Bug ID 6456628.\nThe easiest workaround is to make /etc/localtime a symlink to the correct zoneinfo file.  For Pacific time, the following commands should work:\n\nI haven't had any problems with the symlink approach.\nEdit: Added \"sudo\" to the commands.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It may help to double-check the timezone rules your OS is using.\n\nThis file should contain your daylight savings rules, like this one for the year 2080:\n\nYou can compare this with the timezone rules you think you should be using. They can be found in /usr/share/zoneinfo/.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I had a similar issue, possibly the same one. However my tomcat server runs on a windows box so the symlink solution will not work. \nI set \"-Duser.timezone=Australia/Sydney\" in the JAVA_OPTS however tomcat would not recognize that DST was in effect. As a workaround i changed Australia/Sydney (+10 GMT) to Pacific/Numea (+11 GMT) so that times would correctly display however i would love to know the actual solution or bug, if any.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "On a recent Java project, we needed a free Java based real-time data plotting utility.  After much searching, we found this tool called the Scientific Graphics Toolkit or SGT from NOAA.  It seemed pretty robust, but we found out that it wasn't terribly configurable.  Or at least not configurable enough to meet our needs.  We ended up digging very deeply into the Java code and reverse engineering the code and changing it all around to make the plot tool look and act the way we wanted it to look and act.  Of course, this killed any chance for future upgrades from NOAA.  \nSo what free or cheap Java based data plotting tools or libraries do you use?\nFollowup:  Thanks for the JFreeChart suggestions.  I checked out their website and it looks like a very nice data charting and plotting utility.  I should have made it clear in my original question that I was looking specifically to plot real-time data.  I corrected my question above to make that point clear.  It appears that JFreeChart support for live data is marginal at best, though.  Any other suggestions out there?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I used JFreeChart (http://www.jfree.org/jfreechart/) on a previous project.  It has some very good built-in capabilities, and the design was WAY extensible so you could always roll your own extension later if you needed some custom chart annotation or wanted an axis to render differently, or whatever.  It's definitely worth checking out.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've had success using JFreeChart on multiple projects. It is very configurable. JFreeChart is open source, but they charge for the developer guide. If you're doing something simple, the sample code is probably good enough. Otherwise, $50 for the developer guide is a pretty good bargain.\nWith respect to \"real-time\" data, I've also used JFreeChart for these sorts of applications. Unfortunately, I had to create some custom data models with appropriate synchronization mechanisms to avoid race conditions. However, it wasn't terribly difficult and JFreeChart would still be my first choice. However, as the FAQ suggests, JFreeChart might not give you the best performance if that is a big concern.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used JFreeChart in a rather complex application that needed to visualize data streams and calculations based on the data. We implemented the ability to visually edit the data plots by mouse and had a very large set of data points. JFreeChart handled it very well.\nUnfortunately I was stuck with v0.7, but the newest release are sooo much better when it comes to API clarity. The community is very helpful and the developers are responding to mails too.\nIf you're doing a web application and don't want to bother with libraries, you can check the Google Chart API. Didn't use it myself, but I started some tests which were very promising.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    }
]