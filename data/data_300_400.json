[
    {
        "pos": "This is a nasty one for me...  I'm a PHP guy working in Java on a JSP project.  I know how to do what I'm attempting through too much code and a complete lack of finesse.   I'd prefer to do it RIGHT. :) Here is the situation:\nI'm writing a small display to show customers what days they can water their lawns based on their watering group (ABCDE) and what time of year it is.  Our seasons look like this:\nSummer (5-1 to 8-31) \nSpring  (3-1 to 4-30) \nFall (9-1 to 10-31)\nWinter (11-1 to 2-28) \nAn example might be:\nIf I'm in group A, here would be my allowed times:\nWinter: Mondays only\nSpring: Tues, Thurs, Sat\nSummer: Any Day\nFall: Tues, Thurs, Sat\nIf I was writing this in PHP I would use arrays like this:\n\nI COULD make the days arrays (array(\"Tuesday\",\"Thursday\",\"Saturday\")) etc, but it is not necessary for what I'm really trying to accomplish.\nI will also need to setup arrays to determine what season I'm in:\n\nCan anyone suggest a really cool way to do this? I will have today's date and the group letter.  I will need to get out of my function a day (M) or a series of days (tTS), (Any).\nThanks, folks!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You could do essentially the same code with Hashtables (or some other Map):\n\nNot as elegant, but then again, Java isn't a dynamic language, and it doesn't have hashes on the language level.\nNote: You might be able to do a better solution, this just popped in my head as I read your question.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There is no pretty solution.  Java just doesn't do things like this well.  Mike's solution is pretty much the way to do it if you want strings as the indices (keys).  Another option if the hash-of-hashes setup is too ugly is to append the strings together (shamelessly stolen from Mike and modified):\n\nand then lookup:\n\nIf you're unhappy with the general ugliness (and I don't blame you), put it all behind a method call:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Brian Warshaw\nFYI, with Java 1.5, primitives are now autoboxed to the wrapped version, so you can call it with just the primitive:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not a Java programmer, but getting away from Java and just thinking in terms that are more language agnostic - a cleaner way to do it might be to use either constants or enumerated types.  This should work in any langauge that supports multi-dimensional arrays.\nIf using named constants, where, for example: \n\nThen the constants serve as more readable array subscripts:\n\nUsing enumerated types:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Don't try to be as dynamic as PHP is. You could try to first define what you need.\n\nAnd please, read the documentation of Hashtable before using it. This class is synchronized which means that each call is protected against multithreading which really slows the access when you don't need the extra protection. Please use any Map implementation instead like HashMap or TreeMap.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It seems like everyone is trying to find the Java way to do it like you're doing it in PHP, instead of the way it ought to be done in Java. Just consider each piece of your array an object, or, at the very least, the first level of the array as an object and each sub level as variables inside the object. The build a data structure that you populate with said objects and access the objects through the data structure's given accessors.\nSomething like:\n\nOf course that probably isn't right either. I'd make each season an object, and maybe each weekday list as an object too. Anyway, its more easily reused, understood, and extensible than a hobbled-together Hashtable that tries to imitate your PHP code. Of course, PHP has objects too, and you should use them in a similar fashion instead of your uber-arrays, wherever possible. I do understand the temptation to cheat, though. PHP makes it so easy, and so fun!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I agree that you should definitely put this logic behind the clean interface of:\n\nbut maybe you should stick the data in a properties file.  I'm not against hardcoding this data in your source files but, as you noticed, Java can be pretty wordy when it comes to nested Collections.  Your file might looks like:\n\nA.Summer=M\n  A.Spring=tTS\n  B.Summer=T\n\nUsually I don't like to move static data like this to an external file because it increases the \"distance\" between the data and the code that uses it.  However, whenever you're dealing with nested Collections, especially maps, things can get real ugly, real fast.\nIf you don't like this idea, maybe you can do something like this:\n\nYou lose some readability but at least the data is closer to where it's going to be used.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm totally at a loss as to why some of you seem to think that throwing gobs of objects at the code is the way to go.  For example, there are exactly four seasons, and they don't do or store anything.  How does it simplify anything to make them objects?  Wing is quite right that these should probably be constants (or maybe enums).\nWhat Bruce needs, at it's heart, is simply a lookup table.  He doesn't need a hierarchy of objects and interfaces; he needs a way to look up a schedule based on a season and a group identifier.  Turning things into objects only makes sense if they have responsibilities or state.  If they have neither, then they are simply identifiers, and building special objects for them just makes the codebase larger.\nYou could build, e.g., Group objects that each contain a set of schedule strings (one for each season), but if all the Group object does is provide lookup functionality, then you've reinvented the lookup table in a much less intuitive fashion.  If he has to look up the group, and then lookup the schedule, all he has is a two-step lookup table that took longer to code, is more likely to be buggy, and will be harder to maintain.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think Ian is absolutely right: stop trying to implement your PHP code in Java.  Instead, take a step back and think about how you might design this from scratch.  In particular, why not put all that data into a database, instead of hard-coding it in your sources or using properties files?  Using a database will be much easier to maintain, and there are a variety of free database engines to choose from.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Jason\n\nIn particular, why not put all that data into a database, instead of hard-coding it in your sources or using properties files? Using a database will be much easier to maintain, and there are a variety of free database engines to choose from.\n\nAdding a database is an incredibly heavyweight way to solve a problem that fits easily into a text file (or even directly into the source).  There are 5 groups and 4 seasons.  That means there are going to be a total of 20 records in the database.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Derek\n\nAdding a database is an incredibly heavyweight way to solve a problem that fits easily into a text file (or even directly into the source). There are 5 groups and 4 seasons. That means there are going to be a total of 20 records in the database.\n\nTwo of the database engines I linked to are implemented entirely in Java and can be embedded in an application just by including a jar file.  It's a little heavyweight, sure, but it's a lot more scalable and easier to maintain.  Just because there are 20 records today doesn't mean there won't be more later due to changing requirements or feature creep.\nIf in a few weeks or months you decide you want to add, say, time of day watering restrictions, it will be much easier to add that functionality if you're already using a database.  Even if that never happens, then you've spent a few hours learning how to embed a database in an application.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Jason\n\nTwo of the database engines I linked to are implemented entirely in Java and can be embedded in an application just by including a jar file. It's a little heavyweight, sure, but it's a lot more scalable and easier to maintain. Just because there are 20 records today doesn't mean there won't be more later due to changing requirements or feature creep.\nIf in a few weeks or months you decide you want to add, say, time of day watering restrictions, it will be much easier to add that functionality if you're already using a database. Even if that never happens, then you've spent a few hours learning how to embed a database in an application.\n\nEmbedding a DB in Java doesn't make it easier to maintain.  There's now an additional code dependency that did not previously exist.  Updating the set of schedules is now more difficult, as either a custom tool must be coded or a DB-specific interface must be used, whereas previous notepad.exe was sufficient.  Scalability is not a concern here, either.  The needs of this system could increase by a million and the flat file would still work just fine.\nCertainly, it's possible that in the future needs will evolve to the point that it's worth moving to a database.  That's when you make the change.  Trying to future-proof an application never works, because we always assume incorrectly about future needs.  We can't say it'll only take a few hours to embed the database either, because we suck at estimating schedules, too.  If there even comes a time when the database is appropriate, then refactor the code to use a database.  In the meantime, do the simplest thing that could possibly work.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Does the \"date\" have to be a parameter? If you're just showing the current watering schedule the WateringSchedule class itself can figure out what day it is, and therefore what season it is. Then just have a method which returns a map where the Key is the group letter. Something like:\n\nThen in the JSP page\n\nIf you need to show the schedules for more than one season, you should have a method in the WateringSchedule class that returns a map where Seasons are the keys, and then Maps of groupToScheduledDays are the values.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here's one way it could look like, you can figure the rest out:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm with those that suggest encapsulating function in objects.\n\nEDIT: Also, your date ranges don't take leap years into account:\n\nOur seasons look like this: Summer\n  (5-1 to 8-31) Spring (3-1 to 4-30)\n  Fall (9-1 to 10-31) Winter (11-1 to\n  2-28)\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I just get the beach ball all day long (it's been doing nothing for hours). It's not taking CPU, not reading from disk, not using the network.\nI'm using Java 1.6 on Mac OS X 10.5.4. It worked once, now even restarts of the computer won't help. Activity Monitor says it's \"(Not Responding)\". Only thing that I can do is kill -9 that sucker.\nWhen I sample the process I see this:\n\nAn acceptable answer that doesn't fix this would include a url for a decent free Oracle client for the Mac.\nEdit:\n@Mark Harrison sadly this happens every time I start it up, it's not an old connection. I'll like to avoid running Windows on my laptop. I'm giving some plugins for my IDE a whirl, but still no solution for me.\n@Matthew Schinckel Navicat seems to only have a non-commercial Oracle product...I need a commercial friendly one (even if it costs money).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The company Navicat has released an Oracle client for Mac (and they do a Windows version too).\nIt's not free, but I think you can get a 30 day demo.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I get the same problem after there's been an active connection sitting idle for a while. I solve it by restarting sql developer every once in a while.\nI also have Toad for Oracle running on a vmware XP session, and it works great.  If you don't mind the money, try that.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Squirrel is a nice database agonstic application development client.  No Oracle specific features, but runs well on the mac\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The latest version of SQL Developer is very good and I have experienced no problems with it on my Mac Pro.  DB Solo 3 is also quite good.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I use SQLDeveloper on the Mac and have had problems where it becomes unresponsive.  Usually, I can fix this by going into the Activity Monitor and killing the process.  However, this doesn't always work to end the process.  When that happens, I go to the Terminal and find the process id and send it a SIGKILL and then the next time it will work correctly.\nHowever, more importantly I evaluated SQLGrinder at one point.  I didn't end up buying the software, largely because I have a Mac laptop and a windows desktop.  Therefore, I more often use Toad on the windows desktop and it wasn't worth purchasing SQLGrinder for me.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am calling a vendor's Java API, and on some servers it appears that the JVM goes into a low priority polling loop after logging into the API (CPU at 100% usage).  The same app on other servers does not exhibit this behavior. This happens on WebSphere and Tomcat.  The environment is tricky to set up so it is difficult to try to do something like profiling within Eclipse.\nIs there a way to profile (or some other method of inspecting) an existing Java app running in Tomcat to find out what methods are being executed while it's in this spinwait kind of state?  The app is only executing one method when it gets in this state (vendor's method). Vendor can't replicate the behavior (of course).\n\nUpdate:  \nUsing JConsole I was able to determine who was running and what they were doing.  It took me a few hours to then figure out why it was doing it.  The problem ended up being that the vendor's API jar that was being used did not match exactly to the the database configuration that it was using.  It was defaulting to having tracing and performance monitoring enabled on the servers that had the slight mis-match in configuration.  I used a different jar and all is well.\nSo thanks, Joshua, for your answer. JConsole was extremely easy to setup and use to monitor an existing application. \n@Cringe - I did some experimenting with some of the options you suggested.  I had some problems with getting JProfiler set up, it looks good (but pricey).  Going forward I went ahead and added the Eclipse Profiler plugin and I'll be looking over the different open source profilers to compare functionality.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you are using Java 5 or later, you can connect to your application using jconsole to view all running threads. jstack also will do a stack dump. I think this should still work even inside a container like Tomcat.\nBoth of these tools are included with JDK5 and later (I assume the process needs to be at least Java 5, though I could be wrong)\nUpdate:\nIt's also worth noting that starting with JDK 1.6 update 7 there is now a bundled profiler called VisualVM which can be launched with 'jvisualvm'. It looks like it is a java.net project, so additional info may be available at that page. I haven't used this yet but it looks useful for more serious analysis.\nHope that helps\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If it's for professional purpose and you have some money to spend, try to get your hands on JProfiler. If you just want to get some insights, try out the Eclipse Profiler Plugin. I used it several times, but I don't know the current state.\nA new(?) project from the eclipse project itself is available too: http://www.eclipse.org/tptp/ (See this article). Never used it, so I can't tell if it is worth the effort.\nThere's also a very good list of open source profilers available at http://www.manageability.org/blog/stuff/open-source-profilers-for-java\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Facing the same problem I used YourKit profiler. It's loader doesn't activate unless you actually connect to it (though it does open a port to listen for connections). The profiler itself has a nice \"get amount of time spent in each method\" while working in it's less obtrusive mode.\nAnother way is to detect CPU load (via JNI, so you'd need an external library for this) in a \"watchdog\" thread with highest priority and start logging all threads when the CPU is high enough for a long enough time. You might find this article enlightining.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For completeness sake: even though my company more or less standardizes on Eclipse we use Netbeans (6 and up) with its included, free profiler on a daily basis. It works better than the Eclipse TPTP plugin (last checked 3 months ago) and for us it removes any need for a commercial profiler such as JProfiler, which is excellent, but fast becoming unnecessary.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "VisualVM should be the profiler from netbeans as standalone. I tried the TPTP for eclipse but visualVm seems as a much nicer option!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use a profiler. Yes they cost money, and using them can occasionally be a bit awkward, but they do provide you with a great deal more real evidence rather than guesswork.\nHuman beings are universally bad at guessing where performance bottlenecks are. It just seems to be something our brains aren't build to do very well. It may seem obvious, you may have great ideas about what the problem is, but the real world often turns out to be doing something different. And optimising the wrong part of code means, at best, lots of work for minimal benefit. More often it makes things slower, and sometimes it breaks things entirely. So before you make any changes for the sake of optimisation, you should always have real evidence from a profiler or other accurate tool.\nAs mentioned, both JProfiler and YourKit are both fairly good and not prohibitively expensive. Last time I looked, they both had free demos too.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If JConsole can't be used you can\n\npress CTRL+BREAK under Windows\nsend kill -3 <process id> under Linux\n\nto get a full Thread Dump. This doesn't affect performance and can always be run in production.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "JRockit Mission Control Latency Analyzer.\nThe Latency Analyzer that comes with JRockit shows you what the JVM is \"doing\" when it's not doing anything. In the latest version you can see latencies for:\n\nJava wait/blocked/sleep/parked.\nFile I/O\nNetwork I/O\nMemory allocation\nGC pauses\nJVM latencies, e.g code generation and class loading \nThread suspension \n\nThe tool will give you the stack trace when the latency occurred. You can view the latency data in many different ways (aggregated traces, as a histogram, in a thread graph etc.). The tool also allows you to see transitions between threads, for instance when one thread notifies another.\nlatency analyzer http://blogs.oracle.com/hirt/WindowsLiveWriter/The.0LatencyAnalyserMigratedfromtheoldBE_7246/latency_graph_2.png\nThe overhead is negligible and unlike many other tools it can be used in a production environment. \nThis blog post gives you a brief introduction and the program can be downloaded here.\nIt's free to use for development!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've recently inherited a internationalized and text-heavy Struts 1.1 web application. Many of the JSP files look like:\n\nand the properties files look like:\n\nwith the appropriate translations in N other languages (messages_fr.properties, etc).\nProblems:\n\nDRY violation - I have N references to my Struts action URLs instead of 1, which makes refactoring action URLs error-prone.\nMixed concerns - My application's markup is now in more than just my JSP files, making it difficult for a web specialist to tweak the markup (using CSS, etc).\nPost-translation markup - Anytime I receive newly-translated text, I must decide what to surround with the <a>...</a> markup. Easy for English but less so for unfamiliar languages.\n\nI've considered adding placeholders in the messages file, like:\n\nbut then the words \"address\" and \"contact information\" would somehow need to be localized, wrapped with markup, and passed to my message tag - and I can't see an easy way to do it.\nWhat can I do to improve this?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Perhaps:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One approach that comes to mind is that you could store the translated replacement parameters i.e. \"address\" and \"contact information\" in a separate properties file, one per locale. Then have your Action class (or probably some helper class) look up the values from the correct ResourceBundle for the current locale and pass them to the message tag.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nThe message message tag API allows\n  only 5 parametric arguments\n\nAh! I blame my complete ignorance of the Struts API.\nTo quote the manual: \n\nSome of the features in this taglib\n  are also available in the JavaServer\n  Pages Standard Tag Library (JSTL). The\n  Struts team encourages the use of the\n  standard tags over the Struts specific\n  tags when possible.\n\nYou could probably do this with the http://java.sun.com/jsp/jstl/fmt taglib.\n\nThe downside is that this isn't valid XML and yanking the values to variables involves more indirection, lookups and verbosity. This is not a good solution.\nI don't know Struts, but if it is anything like JavaServer Faces (same architect), then there is probably support for configuring a replacement control. I would either replace the existing control with a more flexible one or add a new one.\n\nAnytime I receive newly-translated\n  text, I must decide what to surround\n  with the <a>...</a> markup.\n\nThere is no way you should be doing this and I see this as a fault in your translation process (I am an ex-localization engineer and ex-developer of localization tools). The {0} characters should be included in the files that are sent to the translators. The localization guidelines should explain the string's context and the meaning of any variables.\nYou can programmatically validate the property bundles on return. String-specific regex's might do the trick. It isn't outside the realms of possibility that \"address\" and \"contact information\" would swap order during translation.\nThe simplest solution is to redesign the messages to render:\n\nI accept that this might not be a solution in all cases and may have your UI designer spitting teeth.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nAvoid creating links within long\n  blocks of text. Prefer shorter text\n  that can act as a logically complete\n  and independent link.\n\nGenerally, it will lead to fewer problems. Sometimes you have to compromise your UI design to accommodate localization; sometimes you need to compromise your localization process to accommodate the UI.\nAny time a developer manually manipulates post-translation strings is a source of potentially expensive bugs. Cutting/pasting or string editing can result in character corruption, misplaced strings, etc. A translation defect needs the participation of outside parties to fix which involves cost and takes time.\nThinking on it, something like this might be less ugly:\n\n...but I'm no UI designer.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Currently we have a project with a standard subversion repository layout of:\n./trunk\n./branches\n./tags\nHowever, as we're moving down the road of OSGi and a modular project, we've ended up with:\n./trunk/bundle/main\n./trunk/bundle/modulea\n./trunk/bundle/moduleb\n./tags/bundle/main-1.0.0\n./tags/bundle/main-1.0.1\n./tags/bundle/modulea-1.0.0\nThe 'build' is still quite monolithic in that it builds all modules in sequence, though I'm starting to wonder if we should refactor the build/repository to something more like:\n./bundle/main/trunk\n./bundle/main/tags/main-1.0.0\n./bundle/main/tags/main-1.0.1\n./bundle/modulea/trunk\n./bundle/modulea/tags/modulea-1.0.0  \nIn this pattern I would imagine each module building itself, and storing its binary in a repository (maven, ivy, or another path of the subversion repository itself).\nAre there guidelines or 'best-practices' over project layouts once one goes modular?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This is very much up to personal preference, but I find the following structure suitable for large projects consisting of many modules:\n\nI have also often used the structure in large repositories containing many projects, because keeping all projects in the same repository makes cross-referencing projects and sharing code between them\u2014with history\u2014easier.\nI like to use the structure with root trunk, tags and branches folders from the start because in my experience (with large repositories containing many projects), many sub-projects and modules will never have separate tags or branches, so there is no need to create the folder structure for them. It also makes it easier for the developers to check out the entire trunk of the repository and not get all the tags and branches (which they don't need most of the time).\nI guess this is a matter of project or company policy though. If you have one repository for each project or a given developer is only likely to work on a single project in the repository at a time the rooted trunk may not make as much sense.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The Subversion book contains two sections on this:\n\nRepository Layout\nPlanning Your Repository Organization\n\nA blog entry on the subject: \"Subversion Repository Layout\"\nThe short answer, though: while your mileage will vary (every situation is individual), your /bundle/<project>/(trunk|tags|branches) scheme is rather common and will likely work well for you.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've answered a similar question in a StackOverflow Version Control Structure question. It actually fits even better here since we do heavy OSGi development and have lots of bundles. I must echo Anders Sandvig comments: keep trunk/tags/branches on the root level since you will only branch a limited set of modules. It also does not interfere with modules building individually.\nI won't copy the answer I made before but it is entirely relevant to this question.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm trying to retrieve a file from a server using SFTP (as opposed to FTPS) using Java. How can I do this?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This was the solution I came up with\nhttp://sourceforge.net/projects/sshtools/ (most error handling omitted for clarity). This is an excerpt from my blog\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another option is to consider looking at the JSch library. JSch seems to be the preferred library for a few large open source projects, including Eclipse, Ant and Apache Commons HttpClient, amongst others.\nIt supports both user/pass and certificate-based logins nicely, as well as all a whole host  of other yummy SSH2 features.\nHere's a simple remote file retrieve over SFTP. Error handling is left as an exercise for the reader :-)\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A nice abstraction on top of Jsch is Apache commons-vfs which offers a virtual filesystem API that makes accessing and writing SFTP files almost transparent. Worked well for us.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Suppose you have the following EJB 3 interfaces/classes:\n\nAnd then another bean that accesses the FooRepository bean :\n\nHowever, the overriding method is never executed when the delete method of the FooRepository bean is called. Instead, only the implementation of the delete method that is defined in AbstractRepository is executed. \nWhat am I doing wrong or is it simply a limitation of Java/EJB 3 that generics and inheritance don't play well together yet ?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Can you write a unit test against your FooRepository class just using it as a POJO.  If that works as expected then I'm not familiar with any reason why it would function differently inside a container.\nI suspect there is something else going on and it will probably be easier to debug if you test it as a POJO.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I tried it with a pojo and it seems to work. I had to modify your code a bit.\nI think your interfaces were a bit off, but I'm not sure.\nI assumed \"Foo\" was a concrete type, but if not I can do some more testing for you.\nI just wrote a main method to test this.\nI hope this helps!\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm just about to make my first trip into the world of JNI (Java Native Interface) to provide file system change notifications from platform specific C/C++ code to Java. That is unless someone suggest some brilliant library for doing this that I've missed.\nBeing new to JNI I've managed to find much documentation on the interface side of it and library generation side of it, but I've not found much on building the native library.\nI've got an existing build based on ant for the pre-existing Java source, so I'm trying to work out if I should get ant to call make  to create the library or if it's best to get make to call ant after creating the library?\nNeither option jumps out as being terribly nice, but both seem better than trying to get ant to call a compiler to compile the code and generate the library directly.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As a simpler alternative to JNI, try JNA: https://jna.dev.java.net/, may solve this hassle for you and be simpler (assuming it can do what you want).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I strongly dislike make because of its implicit ruleset and treatment of whitespace.  Personally I would use cpp tasks (http://ant-contrib.sourceforge.net/cpptasks/index.html) to do my C compilation.   They are not as flexible as make but they are also far less complex and it will mean you don't have to burden your developers with learning make.  \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm working on something similar right now. Be aware that using swig from swig.org is often easier as it generates the stubs to the native library for you.\nThe short answer to your question is that the ant file should run the make file after the java library has already been built, as the native library depends on the swig generated header, which is generated from the java class files.\nIf you are super familiar with ant, and don't want to learn a new system, then http://ant-contrib.sourceforge.net/cpptasks/index.html, also linked by another poster, will let you build c++ in ant.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'd skip JNI entirely, and use an external program which writes notifications on standard-output. Java can then simply read from the programs output stream and generate whatever event is necessary. JNI is way too much work if all you want is to send simple notifications.\nAlso, on Linux you can simply start \"inotifywait\" (with some suitable parameters, see \"man inotifywait\").\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Sometimes a labeled break or continue can make code a lot more readable. \n\nI was wondering what the common convention for the labels was. All caps? first cap? \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The convention is to avoid labels altogether.\nThere are very, very few valid reasons to use a label for breaking out of a loop. Breaking out is ok, but you can remove the need to break at all by modifying your design a little. In the example you have given, you would extract the 'Lots of code' sections and put them in individual methods with meaningful names. \n\n\nEdit: having seen the actual code in question (over here), I think the use of labels is probably the best way to make the code readable. In most cases using labels is the wrong approach, in this instance, I think it is fine.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The convetion/best practise would still be not to use them at all and to refactor the code so that is more readable using extract as method.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you have to use them use capitals, this draws attention to them and singles them out from being mistakenly interpreted as \"Class\" names.  Drawing attention to them has the additional benefit of catching someone's eye that will come along and refactor your code and remove them. ;)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "They are kind of the goto of Java - not sure if C# has them. I have never used them in practice, I can't think of a case where avoiding them wouldn't result in much more readable code. \nBut if you have to- I think all caps is ok. Most people won't use labelled breaks, so when they see the code, the caps will jump out at them and will force them to realise what is going on. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nI know, I should not use labels.\nBut just assume, I have some code, that could gain a lot in readability from labeled breaks, how do I format them.\n\nMo, your premise is wrong.\nThe question shouldn't be 'how do I format them?'\nYour question should be 'I have code that has a large amount of logic inside loops - how do I make it more readable?'\nThe answer to that question is to move the code into individual, well named functions. Then you don't need to label the breaks at all.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The convention I've most seen is simply camel case, like a method name...\n\nbut I've also seen labels prefixed with an underscore\n\nor with lab...\n\nYou can probably sense though from the other answers that you'll be hard-pushed to find a coding standard that says anything other than 'Don't use labels'. The answer then I guess is that you should use whatever style makes sense to you, as long as it's consistent.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't understand where this \"don't use labels\" rule comes from. When doing non-trivial looping logic, the test to break or continue isn't always neatly at the end of the surrounding block.\n\nYes, cases like this do happen all the time. What are people suggesting I use instead? A boolean condition like this?\n\nYuck!  Refactoring it as a method doesn't alleviate that either:\n\nSure it's a little prettier, but it's still passing around a superfluous boolean. And if the inner loop modified local variables, refactoring it into a method isn't always the correct solution.\nSo why are you all against labels? Give me some solid reasons, and practical alternatives for the above case.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "wrt sadie's code example:\nYou gave \n\nAs an example. You make a good point. My best guess would be:\n\nBut there would be examples where that kind of refactoring doesn't sit correctly with whatever logic you're doing.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As labels are so rarely useful, it appears, that there is no clear convention. The Java language specification has one example with labels and they are in non_cap.\nBut since they are so rare, in my opinion it is best, to think twice whether they are really the right tool.\nAnd if they are the right tool, make them all caps so that other developers (or yourself later on) realize them as something unusual right away. (as Craig already pointed out)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Sun's Java code style seem to prefer naming labels in the same way as variables, meaning camel case with the first letter in lower case.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The Gang of Four's Design Patterns uses a word processor as an example for at least a few of their patterns, particularly Composite and Flyweight.\nOther than by using C or C++, could you really use those patterns and the object-oriented overhead they entail to write a high-performing fully featured word processor? \nI know that Eclipse is written in Java but I haven't used it much so I don't know if it's all that fast or as polished as something like Visual Studio, which has a C++ based text editing system.\n\nI only used C++ and Java as examples. The question has more to do with the overhead of having a lot of in-memory objects like you would in an application such as a word processor or even a game. \nDesign patterns promote abstraction at the expense of parsimony even though they usually point out when you might take some kind of performance hit. Word processors and especially games get the most benefit from being as close to the metal as possible. \nI was just wondering if anyone knew of an fast object-oriented word processor or text editor that wasn't written in C++, and whether they'd build one using patterns or would they forgoe a lot of the abstracting away of things?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This question actually seems to be about Java vs. C++ performance, and that's not the object orientation so much as running on a virtual machine with garbage collection and such.\nThis whitepaper on Java vs. C++ performance might be worth a read.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Well, flyweight is a ridiculous pattern to use in a word processor.  IIRC, they had each character being referenced as a object [note: it was for each glyph, which is still crazy because your OS will happily draw that for you].  With a pointer being wider than a character and all the processing associated with indirection, you'd be mad to use that particular pattern that way in a word processor.\nIf you're interested in the design of word processors, I found an article that doesn't address patterns but does look at some of the data structures underlying word processor design and design considerations.\nTry to remember that design patterns are there to make your life easier, not for you to be pure.  There has to be a reason to use a pattern, it has to offer some benefit.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Flyweight really is just a way of conserving resources in situations where there are thousands of objects with intrinsic shared state, so it could be useful in higher level languages than C/C++. Maybe the GoF's example using glyphs in a document was not the best choice to illustrate this pattern.\nI think there's a lot more to building a high performance word processor than just these basic patterns though - not sure whether there is anything in GoF that rules out being able to successfully do this.\nGenerally, Visual Studio (VS) is more advanced and performs significantly better than Eclipse - at least, the versions of VS that I have seen. Eclipse is one of the most impressive Java applications out there though, it runs quite well on more recent machines with lots of RAM.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nOne of the things you have to remember was that the GoF book was written in the early 90s, when the prevalent OSes did not have extensive graphic libraries. Even Windows was not yet an OS at that time.\n\nIIRC GoF was released in 1994. Even in 1994 Windows 95 Beta was available (and running on my 486DX33) and Windows 3.x had been around since roughly 1990.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Eclipse + netbeans + IntelliJ all are written pretty much all in java or something that runs on the JVM (not C++). In at least 2 of those IDEs I have spent some time with the editor code, so I can assure you its all java (and its not easy either). \nVS 2005 was my last experience of visual studio, and even then I thought eclipse was much more responsive (intelliJ doubly so given time to warm up and index). \nNot sure how thats relevant but thats my experience. But I am surprised visual studio is still today written in C++ - I would think that it would be in Microsoft's interest to use C# - if nothing else it would really push its performance hard, nothing like eating your own dog food !\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The point of GoF and patterns in general is to talk about how to do things \"right\" as in correct, not necessarily \"right\" as in right for the circumstances. Where performance is an issue, and you find that no named pattern gives adequate performance, then perhaps you can justify going your own way. But a good knowledge of patterns gives you a \"sensible default\" and will probably mean that you sacrifice clarity / SoC / etc only so much as is necessary to give adequate performance.\nFeeling that you are \"deviating\" from the norm encourages you to a) think twice, and b) comment the non-idiomatic code well.\nPatterns are vital knowledge, but nothing is gospel and you must always apply judgement.\nHaving said all that - I can't think of any reason why you couldn't write a decent text editor using patterns and a modern JDK\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's been mentioned to me that I'll be the sole developer behind a large new system.  Among other things I'll be designing a UI and database schema.\nI'm sure I'll receive some guidance, but I'd like to be able to knock their socks off.  What can I do in the meantime to prepare, and what will I need to keep in mind when I sit down at my computer with the spec?\nA few things to keep in mind: I'm a college student at my first real programming job.  I'll be using Java.  We already have SCM set up with automated testing, etc...so tools are not an issue.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Before you start coding, plan out your database schema - everything else will flow from that. Getting the database reasonably correct early on will save you time and headaches later.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Do you know much about OOP?  If so, look into Spring and Hibernate to keep your implementation clean and orthogonal.  If you get that, you should find TDD a good way to keep your design compact and lean, especially since you have \"automated testing\" up and running.\nUPDATE:\nLooking at the first slew of answers, I couldn't disagree more.  Particularly in the Java space, you should find plenty of mentors/resources on working out your application with Objects, not a database-centric approach.  Database design is typically the first step for Microsoft folks (which I do daily, but am in a recovery program, er, Alt.Net).  If you keep the focus on what you need to deliver to a customer and let your ORM figure out how to persist your objects, your design should be better.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I do it the other way around. I find that doing it database-schema-first gets the system stuck in a data-driven-design that is difficult to abstract from persistence. We try to do domain model designs first and then base the database schema on those.\nAnd then there's the infrastructure design: the team should settle on conventions on how to structure the program first and foremost. And then we work together to agree first on a design for the common functionality of the system (e.g., things everyone needs like persistence, logging, etc.). This becomes the framework of the system.\nWe all work on that together first before we split the rest of the functionalities amongst ourselves.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The main thing is being able to abstract the complexity of the system so that you don't get bogged down by it as soon as you start off.\n\nFirst read the spec like a story (skimming through it). Don't stop at every requirement to analyze it right there and then. This will allow you to get an overall picture of the system without too many details. At this point you would start identifying the major functional components of the system. Start putting these down (use a mindmap tool if you like).\nThen take each component and start exploding it (and tying each detail with requirements in the spec document). Do this for all components, till you have covered all requirements.\nNow, you should start looking at relationships between the components, and whether there are repetitions of features or functions across the various components (which you can then pull out to create utility components, or such). Around now, you would have a good detailed map of your requirements in your mind.\nNOW, you should think of designing the database, ER diagrams, Class Design, DFDs, deployment, etc.\n\nThe problem with doing the last step first is that you can get bogged down in the complexity of your system without really gaining an overall understanding in the first place.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I also disagree about starting with the database.  The DB is simply an artifact of how your business objects are persisted.  I don't know of an equivalent in Java, but .Net has stellar tools such as SubSonic that allow your DB design to stay fluid as you iterate through your business objects design.  I'd say first and foremost (even before deciding on what technologies to introduce) focus on the process and identify your nouns and verbs ... then build out from those abstractions.  Hey, it really does work in the \"real world\", just like OOP 101 taught you!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This sounds very much like my first job. Straight out of university, I was asked to design the database and business logic layer, while other people would take care of the UI. Meanwhile the boss was looking over my shoulder, unwilling to let go of what used to be his baby and was now mine, and poking his finger in it. Three years later, developers were fleeing the company and we were still X months away from actually selling anything.\nThe big mistake was in being too ambitious. If this is your first job, you will make mistakes and you will need to change how things work long after you've written them. We had all sorts of features that made the system more complicated than it needed to be, both on the database level and in the API that it presented to other developers. In the end, the whole thing was just far too complicated to support all at once and just died.\nSo my advice:\n\nIf you're not sure about taking on such a big job single-handed, don't. Tell your employers, and get them to find or hire somebody for you to work with who can help you out. If people need to be added to the project, then it should be done near the start rather than after stuff starts going wrong.\nThink very carefully about what the product is for, and to boil it down to the simplest set of requirements you can think of. If the people giving you the spec aren't technical, try to see past what they've written to what will actually work and make money. Talk to customers and salespeople, and understand the market.\nThere's no shame in admitting you're wrong. If it turns out that the entire system needs to be rewritten, because you made some mistake in your first version, then it's better to admit this as soon as possible so you can get to it. Correspondingly, don't try to make an architecture that can anticipate every possible contingency in your first version, because you don't know what every contingency is and will just get it wrong. Write once with an eye to throwing away and starting again - you may not have to, the first version may be fine, but admit it if you do.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Split the big system to smaller pieces.\nAnd don't think that it's so complex, because it usually isn't. By thinking too complex it just ruins your thoughts and eventually the design. Some point you just realize that you could do the same thing easier, and then you redesign it.\nAtleast this has been my major mistake in designing.\nKeep it simple!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It has been my experience that Java applications (.NET also) that consider the database last are highly likely to perform poorly when placed into a corporate environment.  You need to really think about your audience.  You didn't say if it was a web app or not.  Either way the infrastructure that you are implementing on is important when considering how you handle your data.\nNo matter what methodology you consider, how you get and save your data and it's impact on performance should be right up there as one of your #1 priorities.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I found very insightful ideas about starting a new large project, based on\n\ncommon good practices\nTest Driven Development\nand pragmatic approach  \n\nin the book Growing Object-Oriented Software, Guided by Tests.\nIt is still under development, but first 3 chapters may be what You are looking for and IMHO worth reading. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'd suggest thinking about how this application will be used. How will future users work with it? I'm sure you know at least a few things about what this application needs to handle, but my first advice is \"think of the user and what he or she needs\".\nDraw it up on plain paper, thinking of where to section off the code. Remeber not to mix logic with GUI code (common error). This way you will be set to extend your applications reach in the future to servlets and/or applets or whatever platform comes along. Section in layers so that you can respond to large changes faster without rebuilding everything. Layers should not see any other layers than their closest neighbouring layers.\nBegin with true core functionallity. All that time consuming fluff (that will make your project 4 weeks late), wont matter much to the wast majority of users. It can be added later once you are sure you can deliver on time.\nBtw. Even though this has nothing to do with design I'd just like to say that you won't deliver on time. Make a realistic estimate on time consumption and then double it :-) I assume here that you will not be alone in this project and that people will come and go as the project progresses. You may need to train people midway through the project, people go on holiday / need surgery etc. \n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The company I just started working for is using Stripes for parts of its web page development these days, and while it seems to be a nice enough web framework it no one really uses it-- it is almost non existent on the 'net. It's not even first in it's google search and the result you do get is for its old home page.\nSo, do any of you people use Stripes? Of your own volition? Do you know of any good tutorials / examples?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've never used (or even heard of) Stripes.\nRegardless, there's a book from The Pragmatic Bookshelf called Stripes: ...and Java web development is fun again that may be worth checking out. You could also check out the Stripes mailing list archive.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We considered it when we were looking at open source frameworks.  But we saw the same thing your did that there really just isn't much support or information for it.  You should always weight the community support factor surrounding open source projects before picking one. (which is what you are doing here)  :)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I recommend checking out the book referenced by jko:\n\na book from The Pragmatic Bookshelf called Stripes: ...and Java web development is fun again\n\nWhilst still in 'beta' the book covers everything very well.\nAnother good place to start is this ONJava article. \nI have used Stripes on a few projects now and have liked it a lot. \nIt may sound crazy but the Stripes quickstart and sample application documentation on the website does a pretty good job of covering the bases. \nThis is helped by the fact there is little to Stripes, probably because it is relatively new and not trying to be all things to all people. I would say give the quick-start a try and if by the end of it you are unsatisfied look elsewhere. At the end of the day you and your company have to be happy (and productive) with what you are using irrespective of how many people are using it.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Stripes is a great framework. We converted a major project from a home grown framework to stripes and it took less than one week.\nThe book referenced above is a great resources, as is the mailing list.\nThere's also an active irc channel #stripes on freenode.\nIt's a very powerful framework that doesn't get in your way.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's a shame that some people perceive Stripes as a framework for which \"there really just isn't much support or information for it.\" In reality, the Stripes community is very supportive - have a look at the mailing list and you'll see how friendly and responsive people are. In fact, some have said on the #stripes IRC channel that they have had better response for Hibernate-related questions than on #hibernate itself!\nGive Stripes a good, serious look instead of dismissing it because of misconceptions.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm generating some xml files that needs to conform to an xsd file that was given to me.  What's the best way to verify they conform?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here's how to do it using Xerces2. A tutorial for this, here (req. signup).\nOriginal attribution: blatantly copied from here:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Are you looking for a tool or a library?\nAs far as libraries goes, pretty much the de-facto standard is Xerces2 which has both C++ and Java versions.\nBe fore warned though, it is a heavy weight solution. But then again, validating XML against XSD files is a rather heavy weight problem.\nAs for a tool to do this for you, XMLFox seems to be a decent freeware solution, but not having used it personally I can't say for sure.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The Java runtime library supports validation. Last time I checked this was the Apache Xerces parser under the covers. You should probably use a javax.xml.validation.Validator.\n\nThe schema factory constant is the string http://www.w3.org/2001/XMLSchema which defines XSDs. The above code validates a WAR deployment descriptor against the URL http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd but you could just as easily validate against a local file.\nYou should not use the DOMParser to validate a document (unless your goal is to create a document object model anyway). This will start creating DOM objects as it parses the document - wasteful if you aren't going to use them.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I had to validate an XML against XSD just one time, so I tried XMLFox. I found it to be very confusing and weird. The help instructions didn't seem to match the interface.\nI ended up using LiquidXML Studio 2008 (v6) which was much easier to use and more immediately familiar (the UI is very similar to Visual Basic 2008 Express, which I use frequently). The drawback: the validation capability is not in the free version, so I had to use the 30 day trial.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "After I was convinced that labeled breaks/continues are a total \"nono\" over here, I need help to remove the label out of my code.\nI have a square matrix and a vector that has the same length. The vector has already some values in it an depending on the values in the matrix the vector is changed in the loop.\nI hope, the code-fragment is basically understandable\u2026 \n\nPlease convince me, that there is a more readable/better version without the labels.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Easily, my good man.\n\nEDIT: Quite correct you are Anders. I've edited my solution to take that into account as well.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Patrick you are assuming calling setValueInVector( v, idx ); at the end of the second loop is OK. If the code is to be identical, logically, it must be rewritten to somethng like this:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Does this work for you? I extracted the inner loop into a method CheckedEntireMatrix (you can name it better than me) - Also my java is a bit rusty.. but I think it gets the message across\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Gishu has the right idea :\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not too sure to understand the first continue.\nI would copy Gishu and write something like ( sorry if there are some mistakes ) :\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From reading your code. \n\nI noticed your eliminating the invalid vector positions at conditionAtVectorPosition then you remove the invalid rows at anotherConditionAtVector. \nIt seems that checking rows at anotherConditionAtVector is redundant since whatever the value of idx is, anotherConditionAtVector only depends on the row index (assuming anotherConditionAtVector has no side effects). \n\nSo you can do this:\n\nGet the valid positions first using conditionAtVectorPosition (these are the valid columns).\nThen get the valid rows using anotherConditionAtVector.\nFinally, use conditionAtMatrixRowCol using the valid columns and rows.\n\nI hope this helps.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Looking at the solutions presented so far:\n\nThey all look less readable than the original, in that they involve spending more code on the mechanism of the code rather than on the algorithm itself\nSome of them are broken, or were before they were edited. Most damning is the fact that people are having to think quite hard about how to write the code without labels and not break anything.\nSome come with a performance penalty of running the same test twice, which may not always be trivial. The alternative to that is storing and passing round booleans, which gets ugly.\nRefactoring the relevant part of the code into a method is effectively a no-op: it rearranges how the code is laid out in the file, but has no effect on how it's executed.\n\nAll of which makes me believe that, at least in the case of this question as phrased, the label is the correct solution and doesn't need to be refactored away. Certainly there are cases where labels are used incorrectly and should be refactored away. I just don't think it should be treated as some unbreakable rule.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    }
]