[
    {
        "pos": "Check ILOG's JViews - they have a lot of stuff and something might fit your needs.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "All of them are extremely configurable and quite fast.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Not free though.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "At work we are currently still using JUnit 3 to run our tests.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We have been considering switching over to JUnit 4 for new tests being written but I have been keeping an eye on TestNG for a while now.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What experiences have you all had with either JUnit 4 or TestNG, and which seems to work better for very large numbers of tests?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Having flexibility in writing tests is also important to us since our functional tests cover a wide aspect and need to be written in a variety of ways to get results.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Old tests will not be re-written as they do their job just fine.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Old tests will not be re-written as they do their job just fine.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "What I would like to see in new tests though is flexibility in the way the test can be written, natural assertions, grouping, and easily distributed test executions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "First I would say, don't rewrite all your tests just to suit the latest fad.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Junit3 works perfectly well, and the introduction of annotations in 4 doesn't buy you very much (in my opinion).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "It is much more important that you guys write tests, and it sounds like you do.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use whatever seems most natural and helps you get your work done.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I can't comment on TestNG b/c I haven't used it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "But I would recommend unitils, a great wrapper for JUnit/TestNG/DBUnit/EasyMock, regardless of which route you take.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "(It supports all the flavors mentioned above)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used both, but I have to agree with Justin Standard that you shouldn't really consider rewriting your existing tests to any new format.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Regardless of the decision, it is pretty trivial to run both.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG strives to be much more configurable than JUnit, but in the end they both work equally well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Thus you can mark tests that run slowly as in the \"slow\" group and then ignore them when you want quick results.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A suggestion from their documentation is to mark some subset as \"checkin\" tests which should be run whenever you check new files in.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I never saw such a feature in JUnit, but then again, if you don't have it, you don't REALLY miss it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn't do what I wanted to do.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I wish I could remember what it is, but I wanted to bring it up so you know that it's not perfect.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "The biggest advantage TestNG has is annotations which JUnit added in version 4 anyways.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Thus you can mark tests that run slowly as in the \"slow\" group and then ignore them when you want quick results.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A suggestion from their documentation is to mark some subset as \"checkin\" tests which should be run whenever you check new files in.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I never saw such a feature in JUnit, but then again, if you don't have it, you don't REALLY miss it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn't do what I wanted to do.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I wish I could remember what it is, but I wanted to bring it up so you know that it's not perfect.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "The biggest advantage TestNG has is annotations which JUnit added in version 4 anyways.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "About a year ago, we had the same problem",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I spent sometime considering which move was better, and eventually we realized that TestNG has no 'killer features'.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's nice, and has some features JUnit 4 doesn't have, but we don't need them.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "We didn't want people to feel uncomfortable writing tests while getting to know TestNG because we wanted them to keep writing a lot of tests.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Also, JUnit is pretty much the de-facto standard in the Java world.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "There's no decent tool that doesn't support it from the box, you can find a lot of help on the web and they added a lot of new features in the past year which shows it's alive.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We decided to stick with JUnit and never looked back.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG's biggest draw cards for me include its support test groups, and more importantly - test group dependencies (marking a test as being dependent of a group causes the tests to simply skip running when the dependent group fails).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG's other big draw cards for me include test parameters, data providers, annotation transformers, and more than anything - the vibrant and responsive user community.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Whilst on the surface one might not think all of TestNGs features above might not be needed, once you start to understand the flexibility bring to your tests, you'll wonder how you coped with JUnit.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(disclaimer - I've not used JUnit 4.x at all, so am unable to really comment on advances or new features there).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A couple of additions to Mike Stone's reply:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "1) The most frequent thing I use TestNG's groups for is when I want to run a single test method in a test suite.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I simply add this test to the group \"phil\" and then run this group.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "When I was using JUnit 3, I would comment out the entries for all methods but the one I wanted to run in the \"suite\" method, but then would commonly forget to uncomment them before checkin.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With the groups, I no longer have this problem.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have info on my migration from JUnit to TestNG here and here.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm going to start a new project - rewriting an existing system (PHP + SQL Server) from scratch because of some very serious limitations by design.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We have some quite good knowledge of SQL Server (currently we're using SQL Server 2000 in existing system) and we would like to employ its newer version (2008 I guess) in our new project.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am really fond of technologies that Java offers - particularly Spring Framework and Wicket and I am quite familiar with Java from others projects and assignments before.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Therefore, we consider using Java and Microsoft SQL Server.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are two JDBC drivers for SQL Server - jTDS and Microsoft's one - http://msdn.microsoft.com/en-us/data/aa937724.aspx.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think we should test both of them.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Are there any limitations in such solution I should know of? Has someone experience with such a technology combination?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't know about Java and 2008 but you shouldn't have too much trouble with Java and SQL2000.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As lubos suggested, you'd be doing yourself a favour to look at c# but if you're much more comfortable with Java then there shouldn't be any real limitations as the JDBC connector is supported by Microsoft",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've worked on a project using MSQL Server in conjunction with a Java Stack.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It works very well and as long, since JDBC shouldn't really care about your database.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "We used ehcache together with Hibernate and had problems with the MS JDBC Driver, so we switched to jtds and it works really good.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "It's quite a while ago, so you still might wanna give the MS driver a chance.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We've been running an application using Hibernate talking to multiple remote MSQL Server instances for a few years now and we also switched to the jTDS driver early on after a few issues with the M$ driver.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Since the switch we haven't had any issues at all.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "However, it's not a complicated application so it doesn't use any LOB's.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hope that helps.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "jTDS is excellent.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I've been using it for years without issue in high-availability production environments.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "jTDS is excellent.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I've been using it for years without issue in high-availability production environments.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I would lean towards the jTDS driver.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The MSSQL driver has a limitation where you cannot re-read the same column twice.  This happens frequently when using Hibernate.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I was hoping someone could help me out with a problem I'm having using the java search function in Eclipse on a particular project.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "When using the java search on one particular project, I get an error message saying Class file name must end with .class (see stack trace below).",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This does not seem to be happening on all projects, just one particular one, so perhaps there's something I should try to get rebuilt?",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have already tried Project -> Clean and Closing Eclipse, deleting all the built class files and restarting Eclipse to no avail.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The only reference I've been able to find on Google for the problem is at http://www.crazysquirrel.com/computing/java/eclipse/error-during-java-search.jspx, but unfortunately his solution (closing, deleting class files, restarting) did not work for me.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If anyone can suggest something to try, or there's any more info I can gather which might help track it's down, I'd greatly appreciate the pointers.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Also just found this thread - http://www.myeclipseide.com/PNphpBB2-viewtopic-t-20067.html - which indicates the same problem may occur when the project name contains a period.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, that's not the case in my setup, so I'm still stuck.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thanks McDowell, closing and opening the project seems to have fixed it (at least for now).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Two more general-purpose mechanisms for fixing some of Eclipse's idiosyncrasies:",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Close and open the project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Delete the project (but not from disk!) and reimport it as an existing project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Failing that, bugs.eclipse.org might provide the answer.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "If the workspace is caching something broken, you may be able to delete it by poking around in workspace/.metadata/.plugins.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Most of that stuff is fairly transient (though backup and watch for deleted preferences).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm part of a team that develops a pretty big Swing Java Applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Most of our code are legacy and there are tons of singleton references.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We've bunched all of them to a single \"Application Context\" singleton.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What we now need is to create some way to separate the shared context (shared across all applets currently showing) and non-shared context (specific to each applet currently showing).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, we don't have an ID at each of the locations that call to the singleton, nor do we want to propagate the ID to all locations.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What's the easiest way to identify in which applet context we're running?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(I've tried messing with classloaders, thread groups, thread ids so far I could find nothing that will enable me to ID the origin of the call).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I understand you correctly, the idea is to get a different \"singleton\" object for each caller object or \"context\".",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing you can do is to create a thread-local global variable where you write the ID of the current context.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(This can be done with AOP.)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then in the singleton getter, the context ID is fetched from the thread-local to use as a key to the correct \"singleton\" instance for the calling context.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Regarding AOP there should be no problem using it in applets since, depending on your point-cuts, the advices are woven at compile time and a JAR is added to the runtime dependencies.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hence, no special evidence of AOP should remain at run time.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Hugo regarding threadlocal:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I thought about that solution.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, from experiments I found two problems with that approach:",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Shared thread (server connections, etc) are problematic.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "This can be solved though by paying special attention to these thread (they're all under my control and are pretty much isolated from the legacy code).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The EDT thread is shared across all applets.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I failed to find a way to force the creation of a new EDT thread for each applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I failed to find a way to force the creation of a new EDT thread for each applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This means that the threadlocal for the EDT would be shared across the applets.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This one I have no idea how to solve.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Suggestions?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Singletons are evil, what do you expect? ;)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Perhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then use a WeakHashMap to associate class loader with an applet.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase, that would be faster but more work.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Other hacks:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you have access to any component, you can use Component.getParent repeatedly or SwingUtilities.getRoot.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you are in a per-applet instance thread, then you can set up a ThreadLocal.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From the EDT, you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()), and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Recently I tried understanding the use of java.math.MathContext but failed to understand properly.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is it used for rounding in java.math.BigDecimal, if yes why does not it round the decimal digits but even mentissa part.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From API docs, I came to know that it follows the standard specified in ANSI X3.274-1996 and ANSI X3.274-1996/AM 1-2000 specifications but I did not get them to read online.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Please let me know if you have any idea on this.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I'm understanding you correctly, it sounds like you're expecting the MathContext to control how many digits should be kept after the decimal point.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That's not what it's for.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It specifies how many digits to keep, total.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So if you specify that you want 3 significant digits, that's all you're going to get.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example, this:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "will output:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's not for fun.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Actually I found some online example, which stated the use of MathContext to round the amounts/numbers stored in BigDecimal.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example,",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If MathContext is configured to have precision = 2 and rounding mode = ROUND_HALF_EVEN",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "BigDecimal Number = 0.5294, is rounded to 0.53",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So I thought it is a newer technique and used it for rounding purpose.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However it turned into nightmare because it started rounding even mentissa part of number.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example, Number = 1.5294 is rounded to 1.5, Number = 10.5294 is rounded to 10, Number = 101.5294 is rounded to 100 and so on",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So this is not the behavior I expected for rounding (as precision = 2).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It seems to be having some logic because from patter I can say that it takes first two digits (as precision is 2) of number and then appends 0's till the no. of digits become same as unrounded amount (checkout the example of 101.5294)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Thanks for you answer.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It makes sense.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Can you please explain me MathContext in the context of BigDecimal#round method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's nothing special about BigDecimal.round() vs. any other BigDecimal method.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In all cases, the MathContext specifies the number of significant digits and the rounding technique.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Basically, there are two parts of every MathContext.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's a precision, and there's also a RoundingMode.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The precision again specifies the number of significant digits.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So if you specify 123 as a number, and ask for 2 significant digits, you're going to get 120.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It might be clearer if you think in terms of scientific notation.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you only keep 2 significant digits, then you get 1.2e2, or 120.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "By reducing the number of significant digits, we reduce the precision with which we can specify a number.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The RoundingMode part specifies how we should handle the loss of precision.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "To reuse the example, if you use 123 as the number, and ask for 2 significant digits, you've reduced your precision.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With a RoundingMode of HALF_UP (the default mode), 123 will become 120",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "With a RoundingMode of CEILING, you'll get 130.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Outputs:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can see that both the precision and the rounding mode affect the output.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "First of all, I know how to build a Java application.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "But I have always been puzzled about where to put my classes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are proponents for organizing the packages in a strictly domain oriented fashion, others separate by tier.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I myself have always had problems with a) with naming, b) with placing",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where do you put your domain specific constants (and what is the best name for such a class)?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where do you put classes for stuff which is both infrastructural and domain specific (for instance I have a FileStorageStrategy class, which stores the files either in the database, or alternatively in database)?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where to put Exceptions?",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Are there any standards to which I can refer?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Class names should always be descriptive and self-explanatory.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you have multiple domains of responsibility for your classes then they should probably be refactored.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Likewise for you packages.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "They should be grouped by domain of responsibility.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Every domain has it's own exceptions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Generally don't sweat it until you get to a point where it is becoming overwhelming and bloated.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then sit down and don't code, just refactor the classes out, compiling regularly to make sure everything works.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": " Then continue as you did before.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use packages to group related functionality together.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Usually the top of your package tree is your domain name reversed (com.domain.subdomain) to guarantee uniqueness, and then usually there will be a package for your application.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then subdivide that by related area, so your FileStorageStrategy might go in, say, com.domain.subdomain.myapp.storage, and then there might be specific implementations/subclasses/whatever in com.domain.subdomain.myapp.storage.file and com.domain.subdomain.myapp.storage.database.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "These names can get pretty long, but import keeps them all at the top of files and IDEs can help to manage that as well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Exceptions usually go in the same package as the classes that throw them, so if you had, say, FileStorageException it would go in the same package as FileStorageStrategy.",
        "negation_label": 0,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "Likewise an interface defining constants would be in the same package.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There's not really any standard as such, just use common sense, and if it all gets too messy, refactor!",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing I've done in the past - if I'm extending a class I'll try and follow their conventions.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example, when working with the Spring Framework, I'll have my MVC Controller classes in a package called com.mydomain.myapp.web.servlet.mvc",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I'm not extending something I just go with what is simplest. com.mydomain.domain for Domain Objects (although if you have a ton of domain objects this package could get a bit unwieldy).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For domain specific constants, I actually put them as public constants in the most related class.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Some shops make a separate Constants class but I don't see the value in lumping unrelated numbers and strings into a single class.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've seen some other shops try to solve this problem by creating SEPARATE Constants classes, but that just seems like a waste of time and the result is too confusing.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Using this setup, a large project with multiple developers will be duplicating constants all over the place.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I like break my classes down into packages that are related to each other.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "For example:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Model For database related calls",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "View Classes that deal with what you see",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Control Core functionality classes",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Util Any misc. classes that are used (typically static functions) etc.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think keep it simple and don't over think it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Don't over abstract and layer too much.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Just keep it neat, and as it grows, refactoring it is trivial.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the best features of IDEs is refactoring, so why not make use of it and save you brain power for solving problems that are related to your app, rather then meta issues like code organisation.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm a huge fan of organized sources, so I always create the following directory structure:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In /src I'm using the default Java patterns:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Package names starting with your domain (org.yourdomain.yourprojectname) and class names reflecting the OOP aspect you're creating with the class (see the other commenters).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Common package names like util, model, view, events are useful, too.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I tend to put constants for a specific topic in an own class, like SessionConstants or ServiceConstants in the same package of the domain classes.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've really come to like Maven's Standard Directory Layout.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the key ideas for me is to have two source roots - one for production code and one for test code like so:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "(here, both src/main/java and src/test/java are source roots).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Advantages:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Your tests have package (or \"default\") level access to your classes under test.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can easily package only your production sources into a JAR by dropping src/test/java as a source root.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "One rule of thumb about class placement and packages:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Generally speaking, well structured projects will be free of circular dependencies.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Learn when they are bad (and when they are not), and consider a tool like JDepend or SonarJ that will help you eliminate them.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing that I found very helpful for unit tests was to have a myApp/src/ and also myApp/test_src/ directories.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This way, I can place unit tests in the same packages as the classes they test, and yet I can easily exclude the test cases when I prepare my production installation.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Short answer:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "draw your system architecture in terms of modules, drawn side-by-side, with each module sliced vertically into layers (e.g. view, model, persistence).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Then use a structure like com.mycompany.myapp.somemodule.somelayer, e.g. com.mycompany.myapp.client.view or com.mycompany.myapp.server.model.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Using the top level of packages for application modules, in the old-fashioned computer-science sense of modular programming, ought to be obvious.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, on most of the projects I have worked on we end up forgetting to do that, and end up with a mess of packages without that top-level structure.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This anti-pattern usually shows itself as a package for something like 'listeners' or 'actions' that groups otherwise unrelated classes simply because they happen to implement the same interface.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Within a module, or in a small application, use packages for the application layers.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Likely packages include things like the following, depending on the architecture:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "com.mycompany.myapp.view\ncom.mycompany.myapp.model\ncom.mycompany.myapp.services\ncom.mycompany.myapp.rules\ncom.mycompany.myapp.persistence (or 'dao' for data access layer)\ncom.mycompany.myapp.util (beware of this being used as if it were 'misc')",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Within each of these layers, it is natural to group classes by type if there are a lot.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A common anti-pattern here is to unnecessarily introduce too many packages and levels of sub-package so that there are only a few classes in each package.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where I'm working, we're using Maven 2 and we have a pretty nice archetype for our projects.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The goal was to obtain a good separation of concerns, thus we defined a project structure using multiple modules (one for each application 'layer'):",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- common: common code used by the other layers (e.g., i18n)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- entities: the domain entities",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- repositories: this module contains the daos interfaces and implementations",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- services-intf: interfaces for the services (e.g, UserService, ...)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- services-impl: implementations of the services (e.g, UserServiceImpl)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- web: everything regarding the web content (e.g., css, jsps, jsf pages, ...)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "- ws: web services",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Each module has its own dependencies (e.g., repositories could have jpa) and some are project wide (thus they belong in the common module).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Dependencies between the different project modules clearly separate things (e.g., the web layer depends on the service layer but doesn't know about the repository layer).",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Each module has its own base package, for example if the application package is \"com.foo.bar\", then we have:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Each module respects the standard maven project structure:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unit tests for a given layer easily find their place under \\src\\test.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Everything that is domain specific has it's place in the entities module.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Now something like a FileStorageStrategy should go into the repositories module, since we don't need to know exactly what the implementation is.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In the services layer, we only know the repository interface, we do not care what the specific implementation is (separation of concerns).",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "There are multiple advantages to this approach:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "clear separation of concerns",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "each module is packageable as a jar (or a war in the case of the web module) and thus allows for easier code reuse (e.g., we could install the module in the maven repository and reuse it in another project)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "maximum independence of each part of the project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I know this doesn't answer all your questions, but I think this could put you on the right path and could prove useful to others.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Searching for some sample code for converting a point in WGS84 coordinate system to a map position in Google Maps (pixel position), also supporting zoom levels.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If the codes is well commented, then it can also be in some other language.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You can also point me to a open source Java project :)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Some resources found:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "OpenLayer implementation.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "JOSM project",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Excellent Java Map Projection Library from JH LABS.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "This is a pure java PROJ.4 port.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Does projection from WGS84 to meters.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "From there it's quite straightforward to convert meters to tile pixels.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Someone took the javascript code from Google Maps and ported it to python:",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used this and it works great.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "GeoTools has code to transform to and from about any coordinate system you could imagine, and among them also Google Map's.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's also open source.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, it should also be pointed out that GeoTools is a large library, so if you're looking something small, quick and easy, it's likely not the way to go.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I would highly recommend it though if you're going to do other GIS/coordinate transformations, etc. as well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If you use GeoTools or something similar, you might also be interested in knowing that the Google Map coordinate system is called EPSG 3785.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Tile utility code in Java on mapki.com (great resource for google map developers)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the best way to verify/test that a text string is serialized to a byte array with a certain encoding?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In my case, I want to verify that an XML structure is serialized to a byte array with the UTF-8 encoding which is of variable character length.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "As an example, my current ugly procedure is to inject a character known to require two bytes into the structure before serializing, then replacing the two-byte character with an ASCII character and comparing the serialized array lengths.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This should yield two serialized arrays where the array containing the two-byte characters should have length +1.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Plus if the solution is elegant for Java.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I can't think of any elegant way to seek for a byte sequence in a byte array.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "(Could be used to seek for a known byte sequence representing the desired character representation in UTF-8.)",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Perhaps you could deserialise the byte array using a known encoding and ensure that (a) it doesn't throw any exceptions, and (b) deserialises to the original string.",
        "negation_label": 1,
        "error_label": 1,
        "semantic_label": 0
    },
    {
        "pos": "It seems that from your description of the scenario, you may not have the original string readily available.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Might there be a way to create it?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That's good.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "You're right, I don't have the original string, since I'm testing a module that creates an XML document as a byte array.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I didn't think about deserializing to a String with an expected encoding.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That will do the trick.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "I am writing an application in Java for the desktop using the Eclipse SWT library for GUI rendering.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think SWT helps Java get over the biggest hurdle for acceptance on the desktop: namely providing a Java application with a consistent, responsive interface that looks like that belonging to any other app on your desktop.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "However, I feel that packaging an application is still an issue.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "OS X natively provides an easy mechanism for wrapping Java apps in native application bundles, but producing an app for Windows/Linux that doesn't require the user to run an ugly batch file or click on a .jar is still a hassle.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Possibly that's not such an issue on Linux, where the user is likely to be a little more tech-savvy, but on Windows I'd like to have a regular .exe for him/her to run.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Has anyone had any experience with any of the .exe generation tools for Java that are out there?  I've tried JSmooth but had various issues with it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is there a better solution before I crack out Visual Studio and roll my own?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit:  I should perhaps mention that I am unable to spend a lot of money on a commercial solution.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Install4J. Not free, but worth it.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 1
    },
    {
        "pos": "Give the trial a shot",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I went through the same and found that all of the free options weren't very good. Looks like you'll be writing your own.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 2
    },
    {
        "pos": "I'd be interested to see if someone has a free/cheap option that works",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Have you thought about Java Web Start?",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here is a tutorial specifically for deploying an SWT application with Java Web Start.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Maybe you should take a look at IzPack.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I created a very nice installer some years ago and I'd bet that they are still improving it.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It allows the installation of docs, binaries and a clickable link to start the application IIRC.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Have you considered writing a small program in C/C++ that just calls CreateProcess to start up the java VM with the jar (or class) file?\nYou could get Visual C++ Express and put together the startup program pretty easily.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "This would make it easy to add a friendly icon as well.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another option I was considering: rather than writing a native launcher from scratch, Eclipse comes with the source code for its own launcher, and this could perhaps be repurposed for my app.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's a shame that Sun never included anything similar in the JDK.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used the free Launch4J to create a custom launcher for my Java programs on Windows.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Combined with the free NSIS Installer you can build a nice package for your Windows users.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Edit: Did not see that you use SWT.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Don't know if it works with SWT as well, because I used only Swing in my apps.",
        "negation_label": 1,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In my company we use Launch4J to create the exe file, and NSIS to create the installer, with SWT applications.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    }
    {
        "pos": "We have used it for years in several commercial applications and the pair works fine.",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 1
    }
]