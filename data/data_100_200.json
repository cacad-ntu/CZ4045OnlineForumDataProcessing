[
    {
        "pos": "I've never tried it, but you should write a test case to see if reading from a stream after you have hit the end will work, regardless of if there is more data written to the file.\nIs there a reason you can't use a piped input/output stream?  Is the data being written and read from the same application (if so, you have the data, why do you need to read from the file)?\nOtherwise, maybe read till end of file, then monitor for changes and seek to where you left off and continue... though watch out for race conditions.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The answer seems to be \"no\" ... and \"yes\". There seems to be no real way to know if a file is open for writing by another application. So, reading from such a file will just progress until content is exhausted. I took Mike's advice and wrote some test code:\nWriter.java writes a string to file and then waits for the user to hit enter before writing another line to file. The idea being that it could be started up, then a reader can be started to see how it copes with the \"partial\" file. The reader I wrote is in Reader.java.\nWriter.java\n\nReader.java\n\nNo guarantees that this code is best practice.\nThis leaves the option suggested by Mike of periodically checking if there is new data to be read from the file. This then requires user intervention to close the file reader when it is determined that the reading is completed. Or, the reader needs to be made aware the content of the file and be able to determine and end of write condition. If the content were XML, the end of document could be used to signal this.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "You might also take a look at java channel for locking a part of a file.\nhttp://java.sun.com/javase/6/docs/api/java/nio/channels/FileChannel.html\nThis function of the FileChannel might be a start\n\nAn invocation of this method will block until the region can be locked\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Could not get the example to work using FileChannel.read(ByteBuffer) because it isn't a blocking read. Did however get the code below to work:\n\nOf course the same thing would work as a timer instead of a thread, but I leave that up to the programmer. I'm still looking for a better way, but this works for me for now.\nOh, and I'll caveat this with: I'm using 1.4.2. Yes I know I'm in the stone ages still.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I want to convert a primitive to a string, and I tried:\n\nThis fails with the error:\n\nNow, I get that primitives are not reference types (ie, not an Object) and so cannot have methods.  However, Java 5 introduced autoboxing and unboxing (a la C#... which I never liked in C#, but that's beside the point).  So with autoboxing, I would expect the above to convert myInt to an Integer and then call toString() on that.\nFurthermore, I believe C# allows such a call, unless I remember incorrectly.  Is this just an unfortunate shortcoming of Java's autoboxing/unboxing specification, or is there a good reason for this?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Java autoboxing/unboxing doesn't go to the extent to allow you to dereference a primitive, so your compiler prevents it. Your compiler still knows myInt as a primitive.  There's a paper about this issue at jcp.org.\nAutoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa).\nSo unfortunately, you would have to do it like this: (kudos Patrick, I switched to your way)\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Ditto on what Justin said, but you should do this instead:\n\nIt saves an allocation or two and is more readable.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "\nseems like a shortcoming of the\n  specification to me\n\nThere are more shortcomings and this is a subtle topic. Check this out:\n\nHere \"long\" would be printed (haven't checked it myself), because the compiler choses widening over autoboxing. Be careful when using autoboxing or don't use it at all!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One other way to do it is to use:\n\nThis method is overloaded for every primitive type and Object. This way you don't even have to think about the type you're using. Implementations of the method will call the appropriate method of the given type for you, e.g. Integer.toString(myInt).\nSee http://java.sun.com/javase/6/docs/api/java/lang/String.html.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In C#, integers are neither reference types nor do they have to be boxed in order for ToString() to be called. They are considered objects in the Framework (as a ValueType, so they have value semantics), however. In the CLR, methods on primitives are called by \"indirectly\" loading them onto the stack (ldind).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The valid syntax closest to your example is\n\nWhen the compiler finishes, that's equivalent to\n\nHowever, this doesn't perform as well as the conventional usage, String.valueOf(myInt), because, except in special cases, it creates a new Integer instance, then immediately throws it away, resulting in more unnecessary garbage. (A small range of integers are cached, and access by an array access.) Perhaps language designers wanted to discourage this usage for performance reasons.\nEdit: I'd appreciate it if the downvoter(s) would comment about why this is not helpful.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Example: I have two shared objects (same should apply to .dlls). The first shared object is from a third-party library, we'll call it libA.so. I have wrapped some of this with JNI and created my own library, libB.so. Now libB depends on libA.\nWhen webstarting, both libraries are places in some webstart working area. My java code attempts to load libB. At this point the system loader will attempt to load libA which is not in the system library path (java.library.path won't help this). The end result is that libB has an unsatisfied link and cannot be used. \nI have tried loading libA before libB, but that still does not work. Seems the OS wants to do that loading for me. Is there any way I can make this work other than statically  compiling?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm not sure if this would be handled exactly the same way for webstart, but we ran into this situation in a desktop application when dealing with a set of native libraries (dlls in our case).\nLoading libA before libB should work, unless one of those libraries has a dependency that is unaccounted for and not in the path. My understanding is that once it gets to a system loadLibrary call (i.e. Java has found the library in its java.library.path and is now telling the OS to load it) - it is completely dependent on the operating system to find any dependent libraries, because at that point it is the operating system that is loading the library for the process, and the OS only knows how to look in the system path. That seems hard to set in the case of a Webstart app, but there is a way around this that does not involve static compiling. You may be able to shuffle where your libraries are - I am unsure \nIf you use a custom classloader, you can override loadLibrary and findLibrary so that it can locate your libraries from within a jar in your classpath, and if you also make it aware of your native library dependencies (i.e. libB depends on libA depends on libX, then when loading libB you can catch yourself and ensure you load libA first, and in checking that notice and load libX first. Then the OS doesn't try to find a library that isn't in your path. It's klunky and a bit painful, but ensuring Java finds them and loads them all in the correct order can work.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Are both native libraries packaged into a signed jar which is listed as\n\nIn the JNLP file?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I saw this in an answer to another question, in reference to shortcomings of the java spec:\n\nThere are more shortcomings and this is a subtle topic. Check this out:\n\nHere \"long\" would be printed (haven't checked it myself), because the compiler choses >widening over autoboxing. Be careful when using autoboxing or don't use it at all!\n\nAre we sure that this is actually an example of widening instead of autoboxing, or is it something else entirely?\nOn my initial scanning, I would agree with the statement that the output would be \"long\" on the basis of i being declared as a primitive and not an object.  However, if you changed \n\nto\n\nthe output would print \"Integer\"\nWhat's really going on here?  I know nothing about the compilers/bytecode interpreters for java...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Yes it is, try it out in a test.  You will see \"long\" printed.  It is widening because Java will choose to widen the int into a long before it chooses to autobox it to an Integer, so the hello(long) method is chosen to be called.\nEdit: the original post being referenced.\nFurther Edit: The reason the second option would print Integer is because there is no \"widening\" into a larger primitive as an option, so it MUST box it up, thus Integer is the only option.  Furthermore, java will only autobox to the original type, so it would give a compiler error if you leave the hello(Long) and removed hello(Integer).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In the first case, you have a widening conversion happening. This can be see when runinng the \"javap\" utility program (included w/ the JDK), on the compiled class:\n\nClearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction. See reference here.\nAnd in the other case, replacing the \"long x\" with the object \"Long x\" signature, you'll have this code in the main method:\n\nSo you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another interesting thing with this example is the method overloading. The combination of type widening and method overloading only working because the compiler has to make a decision of which method to choose. Consider the following example:\n\nIt doesn't use the run-time type which is List, it uses the compile-time type which is Collection and thus prints \"Collection\". \nI encourage your to read Effective Java, which opened my eyes to some corner cases of the JLS.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the Java equivalent of PHP's $_POST? After searching the web for an hour, I'm still nowhere closer.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Your HttpServletRequest object has a getParameter(String paramName) method that can be used to get parameter values.  http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "POST variables should be accessible via the request object: HttpRequest.getParameterMap(). The exception is if the form is sending multipart MIME data (the FORM has enctype=\"multipart/form-data\"). In that case, you need to parse the byte stream with a MIME parser. You can write your own or use an existing one like the Apache Commons File Upload API.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Here's a simple example. I didn't get fancy with the html or the servlet, but you should get the idea.\nI hope this helps you out.\n\nNow for the Servlet\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "So, in Java, the first line of your constructor HAS to be a call to super... be it implicitly calling super(), or explicitly calling another constructor.  What I want to know is, why can't I put a try block around that?\nMy specific case is that I have a mock class for a test.  There is no default constructor, but I want one to make the tests simpler to read.  I also want to wrap the exceptions thrown from the constructor into a RuntimeException.\nSo, what I want to do is effectively this:\n\nBut Java complains that super isn't the first statement.\nMy workaround:\n\nIs this the best workaround?  Why doesn't Java let me do the former?\n\nMy best guess as to the \"why\" is that Java doesn't want to let me have a constructed object in a potentially inconsistent state... however, in doing a mock, I don't care about that.  It seems I should be able to do the above... or at least I know that the above is safe for my case... or seems as though it should be anyways.\nI am overriding any methods I use from the tested class, so there is no risk that I am using uninitialized variables.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Unfortunately, compilers can't work on theoretical principles, and even though you may know that it is safe in your case, if they allowed it, it would have to be safe for all cases.\nIn other words, the compiler isn't stopping just you, it's stopping everyone, including all those that don't know that it is unsafe and needs special handling. There are probably other reasons for this as well, as all languages usually have ways to do unsafe things if one knows how to deal with them.\nIn C# .NET there are similar provisions, and the only way to declare a constructor that calls a base constructor is this:\n\nin doing so, the base constructor will be called before the body of the constructor, and you cannot change this order.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't know how Java is implemented internally, but if the constructor of the superclass throws an exception, then there isn't a instance of the class you extend.  It would be impossible to call the toString() or equals() methods, for example, since they are inherited in most cases.\nJava may allow a try/catch around the super() call in the constructor if 1. you override ALL methods from the superclasses, and 2. you don't use the super.XXX() clause, but that all sounds too complicated to me.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I can't presume to have a deep understanding of Java internals, but it is my understanding that, when a compiler needs to instantiate a derived class, it has to first create the base (and its base before that(...)) and then slap on the extensions made in the subclass. \nSo it is not even the danger of uninited variables or anything like that at all. When you try to do something in the subclass' constructor before the base class' constructor, you are basically asking the compiler to extend a base object instance that doesn't exist yet.\nEdit:In your case, MyClass becomes the base object, and MyClassMock is a subclass.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's done to prevent someone from creating a new SecurityManager object from untrusted code.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I just saw a comment of suggesting J#, and it made me wonder... is there a real, beneficial use of J# over Java?  So, my feeling is that the only reason you would even consider using J# is that management has decreed that the company should jump on the Java bandwagon... and the .NET bandwagon.  If you use J#, you are effectively losing the biggest benefit of picking Java... rich cross platform support.  Sure there is Mono, but it's not as richly supported or as full featured right?  I remember hearing Forms are not fully (perhaps at all) supported.\nI'm not trying to bash .NET here, I'm just saying, if you are going to go the Microsoft route, why not just use C#?  If you are going to go the Java route, why would J# enter the picture?\nI'm hoping to find some real world cases here, so please especially respond if you've ACTUALLY used J# in a REAL project, and why.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "J# is no longer included in VS2008. Unless you already have J# code, you should probably stay away.\nFrom j# product page:\n\nSince customers have told us that the\n  existing J# feature set largely meets\n  their needs and usage of J# is\n  declining, Microsoft is retiring the\n  Visual J# product and Java Language\n  Conversion Assistant tool to better\n  allocate resources for other customer\n  requirements. The J# language and JLCA\n  tool will not be available in future\n  versions of Visual Studio. To preserve\n  existing customer investments in J#,\n  Microsoft will continue to support the\n  J# and JLCA technology that shipped\n  with Visual Studio 2005 through to\n  2015 as per our product life-cycle\n  strategy. For more information, see\n  Expanded Microsoft Support Lifecycle\n  Policy for Business & Development\n  Products.\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "The whole purpose of J# is to ease the transition of Java developers to the .NET environment which didn't work so well (I guessing here) so Microsoft dropped J# from Visual Studio 2008.\nFor your question, \"Is there a real benefit of using J#?\"..\nin a nutshell... No..\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One of the killers I've found with J# in the past is that there is no built in support for referencing web services. That alone has been enough to deter me from it ever since.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "C# syntax is so close to Java (and better in some ways) that you might as well learn C# instead of J#.  And since C# is more widely used, you can easily find Java --> C# tutorials on google or check out http://www.asp.net/learn and watch some videos.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Instead of J#, I would rather prefer IKVM (http://www.ikvm.net/) to convert my JARs to .NET assemblies as well as access Java APIs in C#.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Strongly agree that syntactically C# beats Java hands down, so there is really no reason to lament the demise of j#.  Now trying to get c# compiling to Java bytecode might be an interesting move as Sun's hotspot jvm is great software.\nOr, for a bit of fun with what might well become the next generation of Java, how about Scala on the CLR...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't think it's a matter of which language is better. In the .NET world there are some inconsistencies between the libraries different languages provide. There are certain functionality that is available in VB.NET that you might like to use from C# but can't. I remember I had to use J# to use some ZIP libraries that were not available in any other language in .NET.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I have used J# as an easy interim step to port a java library into C#.  It made for a good way to port code I don't plan to maintain from Java to .Net.  However, all new development is being done in C#.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've found many sources that talk about the automated Eclipse PDE process.  I feel these sources don't do a good job explaining what's going on.\nI can create the deployable package, in a semi-manual process via the Feature Export.  \nThe automated process requires knowledge of how the org.eclipse.pde.build scripts work.  I have gotten a build created, but not for JNLP.\nQuestions:\n\nHas anyone ever deployed RCP through JNLP?\nWere you able to automate the builds?\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I haven't done this before, but I found this site on the web giving an explanation.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Is anyone successfully using the latest 64-bit Ganymede release of Eclipse on Windows XP or Vista 64-bit?\nCurrently I run the normal Eclipse 3.4 distribution on a 32bit JDK and launch & compile my apps with a 64bit JDK. Our previous experience has been that the 64bit Eclipse distro is unstable for us, so I'm curious if anyone is using it successfully.\nWe are using JDK 1.6.0_05.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've been successfully using it on Vista x64 for some light Java work.  Nothing too involved and no extra plugins, but basic Java coding has been working without any issues.  I'm using the 3.4M7 build but it looks like the 3.4 stable build supports Vista x64 now.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm using Eclipse with a 64bit VM. However I have to use Java 1.5, because with Java 1.6, even 1.6.0_10ea, Eclipse crashed when changing the .classpath-file. On Linux I had the same problems and could only get the 64bit Eclipse to work with 64bit Java 1.5.\nThe problem seems to be with the just in time compilation, since with vmparam -Xint eclipse works -- but this is not a sollution, because it's slow then.\nEdit:\nWith 1.6.0_11 it seems to work. \n1.6_10 final might work as well as mentioned in the comment, but I've not tested that.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am running a Tomcat application, and I need to display some time values.  Unfortunately, the time is coming up an hour off.  I looked into it and discovered that my default TimeZone is being set to:\n\nRather than the Pacific time zone.  This is further indicated when I try to print the default time zone's display name, and it comes up \"GMT-08:00\", which seems to indicate to me that it is not correctly set to the US Pacific time zone.  I am running on Ubuntu Hardy Heron, upgraded from Gutsy Gibbon.\nIs there a configuration file I can update to tell the JRE to use Pacific with all the associated daylight savings time information?  The time on my machine shows correctly, so it doesn't seem to be an OS-wide misconfiguration.\n\nOk, here's an update. A coworker suggested I update JAVA_OPTS in my /etc/profile to include \"-Duser.timezone=US/Pacific\", which worked (I also saw CATALINA_OPTS, which I updated as well). Actually, I just exported the change into the variables rather than use the new /etc/profile (a reboot later will pick up the changes and I will be golden).\nHowever, I still think there is a better solution... there should be a configuration for Java somewhere that says what timezone it is using, or how it is grabbing the timezone. If someone knows such a setting, that would be awesome, but for now this is a decent workaround.\n\nI am using 1.5, and it is most definitely a DST problem.  As you can see, the time zone is set to not use daylight savings.  My belief is it is generically set to -8 offset rather than the specific Pacific timezone.  Since the generic -8 offset has no daylight savings info, it's of course not using it, but the question is, where do I tell Java to use Pacific time zone when it starts up?  I'm NOT looking for a programmatic solution, it should be a configuration solution.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Hmm... off by one hour. DST possibly?\nIs the date set correctly? \nWhat version of the JDK is this running on? (\"java -version\")\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's a \"quirk\" in the way the JVM looks up the zoneinfo file.  See Bug ID 6456628.\nThe easiest workaround is to make /etc/localtime a symlink to the correct zoneinfo file.  For Pacific time, the following commands should work:\n\nI haven't had any problems with the symlink approach.\nEdit: Added \"sudo\" to the commands.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It may help to double-check the timezone rules your OS is using.\n\nThis file should contain your daylight savings rules, like this one for the year 2080:\n\nYou can compare this with the timezone rules you think you should be using. They can be found in /usr/share/zoneinfo/.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I had a similar issue, possibly the same one. However my tomcat server runs on a windows box so the symlink solution will not work. \nI set \"-Duser.timezone=Australia/Sydney\" in the JAVA_OPTS however tomcat would not recognize that DST was in effect. As a workaround i changed Australia/Sydney (+10 GMT) to Pacific/Numea (+11 GMT) so that times would correctly display however i would love to know the actual solution or bug, if any.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "On a recent Java project, we needed a free Java based real-time data plotting utility.  After much searching, we found this tool called the Scientific Graphics Toolkit or SGT from NOAA.  It seemed pretty robust, but we found out that it wasn't terribly configurable.  Or at least not configurable enough to meet our needs.  We ended up digging very deeply into the Java code and reverse engineering the code and changing it all around to make the plot tool look and act the way we wanted it to look and act.  Of course, this killed any chance for future upgrades from NOAA.  \nSo what free or cheap Java based data plotting tools or libraries do you use?\nFollowup:  Thanks for the JFreeChart suggestions.  I checked out their website and it looks like a very nice data charting and plotting utility.  I should have made it clear in my original question that I was looking specifically to plot real-time data.  I corrected my question above to make that point clear.  It appears that JFreeChart support for live data is marginal at best, though.  Any other suggestions out there?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I used JFreeChart (http://www.jfree.org/jfreechart/) on a previous project.  It has some very good built-in capabilities, and the design was WAY extensible so you could always roll your own extension later if you needed some custom chart annotation or wanted an axis to render differently, or whatever.  It's definitely worth checking out.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've had success using JFreeChart on multiple projects. It is very configurable. JFreeChart is open source, but they charge for the developer guide. If you're doing something simple, the sample code is probably good enough. Otherwise, $50 for the developer guide is a pretty good bargain.\nWith respect to \"real-time\" data, I've also used JFreeChart for these sorts of applications. Unfortunately, I had to create some custom data models with appropriate synchronization mechanisms to avoid race conditions. However, it wasn't terribly difficult and JFreeChart would still be my first choice. However, as the FAQ suggests, JFreeChart might not give you the best performance if that is a big concern.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used JFreeChart in a rather complex application that needed to visualize data streams and calculations based on the data. We implemented the ability to visually edit the data plots by mouse and had a very large set of data points. JFreeChart handled it very well.\nUnfortunately I was stuck with v0.7, but the newest release are sooo much better when it comes to API clarity. The community is very helpful and the developers are responding to mails too.\nIf you're doing a web application and don't want to bother with libraries, you can check the Google Chart API. Didn't use it myself, but I started some tests which were very promising.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Check ILOG's JViews - they have a lot of stuff and something might fit your needs. All of them are extremely configurable and quite fast. Not free though.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "At work we are currently still using JUnit 3 to run our tests. We have been considering switching over to JUnit 4 for new tests being written but I have been keeping an eye on TestNG for a while now. What experiences have you all had with either JUnit 4 or TestNG, and which seems to work better for very large numbers of tests? Having flexibility in writing tests is also important to us since our functional tests cover a wide aspect and need to be written in a variety of ways to get results.\nOld tests will not be re-written as they do their job just fine. What I would like to see in new tests though is flexibility in the way the test can be written, natural assertions, grouping, and easily distributed test executions.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "First I would say, don't rewrite all your tests just to suit the latest fad.  Junit3 works perfectly well, and the introduction of annotations in 4 doesn't buy you very much (in my opinion).  It is much more important that you guys write tests, and it sounds like you do.  \nUse whatever seems most natural and helps you get your work done.\nI can't comment on TestNG b/c I haven't used it.  But I would recommend unitils, a great wrapper for JUnit/TestNG/DBUnit/EasyMock, regardless of which route you take. (It supports all the flavors mentioned above)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used both, but I have to agree with Justin Standard that you shouldn't really consider rewriting your existing tests to any new format.  Regardless of the decision, it is pretty trivial to run both.  TestNG strives to be much more configurable than JUnit, but in the end they both work equally well.\nTestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.  Thus you can mark tests that run slowly as in the \"slow\" group and then ignore them when you want quick results.  A suggestion from their documentation is to mark some subset as \"checkin\" tests which should be run whenever you check new files in.  I never saw such a feature in JUnit, but then again, if you don't have it, you don't REALLY miss it.\nFor all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn't do what I wanted to do... I wish I could remember what it is, but I wanted to bring it up so you know that it's not perfect.\nThe biggest advantage TestNG has is annotations... which JUnit added in version 4 anyways.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "About a year ago, we had the same problem. I spent sometime considering which move was better, and eventually we realized that TestNG has no 'killer features'. It's nice, and has some features JUnit 4 doesn't have, but we don't need them.\nWe didn't want people to feel uncomfortable writing tests while getting to know TestNG because we wanted them to keep writing a lot of tests.\nAlso, JUnit is pretty much the de-facto standard in the Java world. There's no decent tool that doesn't support it from the box, you can find a lot of help on the web and they added a lot of new features in the past year which shows it's alive.\nWe decided to stick with JUnit and never looked back.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "TestNG's biggest draw cards for me include its support test groups, and more importantly - test group dependencies (marking a test as being dependent of a group causes the tests to simply skip running when the dependent group fails).\nTestNG's other big draw cards for me include test parameters, data providers, annotation transformers, and more than anything - the vibrant and responsive user community.\nWhilst on the surface one might not think all of TestNGs features above might not be needed, once you start to understand the flexibility bring to your tests, you'll wonder how you coped with JUnit.\n(disclaimer - I've not used JUnit 4.x at all, so am unable to really comment on advances or new features there).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "A couple of additions to Mike Stone's reply:\n1) The most frequent thing I use TestNG's groups for is when I want to run a single test method in a test suite.  I simply add this test to the group \"phil\" and then run this group.  When I was using JUnit 3, I would comment out the entries for all methods but the one I wanted to run in the \"suite\" method, but then would commonly forget to uncomment them before checkin.  With the groups, I no longer have this problem.\n2) Depending on the complexity of the tests, migrating tests from JUnit3 to TestNG can be done somewhat automatically with sed and creating a base class to replace TestCase that static imports all of the TestNG assert methods.\nI have info on my migration from JUnit to TestNG here and here.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm going to start a new project - rewriting an existing system (PHP + SQL Server) from scratch because of some very serious limitations by design.\nWe have some quite good knowledge of SQL Server (currently we're using SQL Server 2000 in existing system) and we would like to employ its newer version (2008 I guess) in our new project.\nI am really fond of technologies that Java offers - particularly Spring Framework and Wicket and I am quite familiar with Java from others projects and assignments before.\nTherefore, we consider using Java and Microsoft SQL Server.\nThere are two JDBC drivers for SQL Server - jTDS and Microsoft's one - http://msdn.microsoft.com/en-us/data/aa937724.aspx. I think we should test both of them.\nAre there any limitations in such solution I should know of? Has someone experience with such a technology combination?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I don't know about Java and 2008... but you shouldn't have too much trouble with Java and SQL2000. As lubos suggested, you'd be doing yourself a favour to look at c# but if you're much more comfortable with Java then there shouldn't be any real limitations as the JDBC connector is supported by Microsoft\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've worked on a project using MSQL Server in conjunction with a Java Stack. It works very well and as long, since JDBC shouldn't really care about your database. We used ehcache together with Hibernate and had problems with the MS JDBC Driver, so we switched to jtds and it works really good.\nIt's quite a while ago, so you still might wanna give the MS driver a chance...\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "We've been running an application using Hibernate talking to multiple remote MSQL Server instances for a few years now and we also switched to the jTDS driver early on after a few issues with the M$ driver. Since the switch we haven't had any issues at all. However, it's not a complicated application so it doesn't use any LOB's. Hope that helps.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "jTDS is excellent. I've been using it for years without issue in high-availability production environments.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I would lean towards the jTDS driver.  The MSSQL driver has a limitation where you cannot re-read the same column twice.  This happens frequently when using Hibernate.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I was hoping someone could help me out with a problem I'm having using the java search function in Eclipse on a particular project.\nWhen using the java search on one particular project, I get an error message saying Class file name must end with .class (see stack trace below). This does not seem to be happening on all projects, just one particular one, so perhaps there's something I should try to get rebuilt?\nI have already tried Project -> Clean... and Closing Eclipse, deleting all the built class files and restarting Eclipse to no avail.\nThe only reference I've been able to find on Google for the problem is at http://www.crazysquirrel.com/computing/java/eclipse/error-during-java-search.jspx, but unfortunately his solution (closing, deleting class files, restarting) did not work for me.\nIf anyone can suggest something to try, or there's any more info I can gather which might help track it's down, I'd greatly appreciate the pointers.\n\nAlso just found this thread - http://www.myeclipseide.com/PNphpBB2-viewtopic-t-20067.html - which indicates the same problem may occur when the project name contains a period. Unfortunately, that's not the case in my setup, so I'm still stuck.\n\nThanks McDowell, closing and opening the project seems to have fixed it (at least for now).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Two more general-purpose mechanisms for fixing some of Eclipse's idiosyncrasies:\n\nClose and open the project\nDelete the project (but not from disk!) and reimport it as an existing project\n\nFailing that, bugs.eclipse.org might provide the answer.\nIf the workspace is caching something broken, you may be able to delete it by poking around in workspace/.metadata/.plugins. Most of that stuff is fairly transient (though backup and watch for deleted preferences).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm part of a team that develops a pretty big Swing Java Applet. Most of our code are legacy and there are tons of singleton references. We've bunched all of them to a single \"Application Context\" singleton. What we now need is to create some way to separate the shared context (shared across all applets currently showing) and non-shared context (specific to each applet currently showing). \nHowever, we don't have an ID at each of the locations that call to the singleton, nor do we want to propagate the ID to all locations. What's the easiest way to identify in which applet context we're running? (I've tried messing with classloaders, thread groups, thread ids... so far I could find nothing that will enable me to ID the origin of the call).\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I understand you correctly, the idea is to get a different \"singleton\" object for each caller object or \"context\".\nOne thing you can do is to create a thread-local global variable where you write the ID of the current context. (This can be done with AOP.) Then in the singleton getter, the context ID is fetched from the thread-local to use as a key to the correct \"singleton\" instance for the calling context. \nRegarding AOP there should be no problem using it in applets since, depending on your point-cuts, the advices are woven at compile time and a JAR is added to the runtime dependencies. Hence, no special evidence of AOP should remain at run time.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@Hugo regarding threadlocal:\nI thought about that solution. However, from experiments I found two problems with that approach:\n\nShared thread (server connections, etc) are problematic. This can be solved though by paying special attention to these thread (they're all under my control and are pretty much isolated from the legacy code).\nThe EDT thread is shared across all applets. I failed to find a way to force the creation of a new EDT thread for each applet. This means that the threadlocal for the EDT would be shared across the applets. This one I have no idea how to solve. Suggestions?\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Singletons are evil, what do you expect? ;)\nPerhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance). Then use a WeakHashMap to associate class loader with an applet. If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase, that would be faster but more work.\nOther hacks:\nIf you have access to any component, you can use Component.getParent repeatedly or SwingUtilities.getRoot.\nIf you are in a per-applet instance thread, then you can set up a ThreadLocal.\nFrom the EDT, you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()), and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Recently I tried understanding the use of java.math.MathContext but failed to understand properly. Is it used for rounding in java.math.BigDecimal, if yes why does not it round the decimal digits but even mentissa part.\nFrom API docs, I came to know that it follows the standard specified in ANSI X3.274-1996 and ANSI X3.274-1996/AM 1-2000 specifications but I did not get them to read online.\nPlease let me know if you have any idea on this.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "If I'm understanding you correctly, it sounds like you're expecting the MathContext to control how many digits should be kept after the decimal point.  That's not what it's for.  It specifies how many digits to keep, total.  So if you specify that you want 3 significant digits, that's all you're going to get.\nFor example, this:\n\nwill output:\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "It's not for fun. Actually I found some online example, which stated the use of MathContext to round the amounts/numbers stored in BigDecimal.\nFor example,\nIf MathContext is configured to have precision = 2 and rounding mode = ROUND_HALF_EVEN\nBigDecimal Number = 0.5294, is rounded to 0.53\nSo I thought it is a newer technique and used it for rounding purpose. However it turned into nightmare because it started rounding even mentissa part of number.\nFor example,\nNumber = 1.5294 is rounded to 1.5\nNumber = 10.5294 is rounded to 10\nNumber = 101.5294 is rounded to 100 \n.... and so on\nSo this is not the behavior I expected for rounding (as precision = 2).\nIt seems to be having some logic because from patter I can say that it takes first two digits (as precision is 2) of number and then appends 0's till the no. of digits become same as unrounded amount (checkout the example of 101.5294 ...)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "@jatan\n\nThanks for you answer. It makes sense. Can you please explain me MathContext in the context of BigDecimal#round method.\n\nThere's nothing special about BigDecimal.round() vs. any other BigDecimal method.  In all cases, the MathContext specifies the number of significant digits and the rounding technique.  Basically, there are two parts of every MathContext.  There's a precision, and there's also a RoundingMode.\nThe precision again specifies the number of significant digits.  So if you specify 123 as a number, and ask for 2 significant digits, you're going to get 120.  It might be clearer if you think in terms of scientific notation.\n123 would be 1.23e2 in scientific notation.  If you only keep 2 significant digits, then you get 1.2e2, or 120.  By reducing the number of significant digits, we reduce the precision with which we can specify a number.\nThe RoundingMode part specifies how we should handle the loss of precision.  To reuse the example, if you use 123 as the number, and ask for 2 significant digits, you've reduced your precision.  With a RoundingMode of HALF_UP (the default mode), 123 will become 120.  With a RoundingMode of CEILING, you'll get 130.\nFor example:\n\nOutputs:\n\nYou can see that both the precision and the rounding mode affect the output.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "First of all, I know how to build a Java application. But I have always been puzzled about where to put my classes. There are proponents for organizing the packages in a strictly domain oriented fashion, others separate by tier.\nI myself have always had problems with a) with naming, b) with placing\n\nWhere do you put your domain specific constants (and what is the best name for such a class)?\nWhere do you put classes for stuff which is both infrastructural and domain specific (for instance I have a FileStorageStrategy class, which stores the files either in the database, or alternatively in database)?\nWhere to put Exceptions?\nAre there any standards to which I can refer?\n\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Class names should always be descriptive and self-explanatory. If you have multiple domains of responsibility for your classes then they should probably be refactored.\nLikewise for you packages. They should be grouped by domain of responsibility. Every domain has it's own exceptions.\nGenerally don't sweat it until you get to a point where it is becoming overwhelming and bloated. Then sit down and don't code, just refactor the classes out, compiling regularly to make sure everything works. Then continue as you did before.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Use packages to group related functionality together.\nUsually the top of your package tree is your domain name reversed (com.domain.subdomain) to guarantee uniqueness, and then usually there will be a package for your application. Then subdivide that by related area, so your FileStorageStrategy might go in, say, com.domain.subdomain.myapp.storage, and then there might be specific implementations/subclasses/whatever in com.domain.subdomain.myapp.storage.file and com.domain.subdomain.myapp.storage.database. These names can get pretty long, but import keeps them all at the top of files and IDEs can help to manage that as well.\nExceptions usually go in the same package as the classes that throw them, so if you had, say, FileStorageException it would go in the same package as FileStorageStrategy. Likewise an interface defining constants would be in the same package.\nThere's not really any standard as such, just use common sense, and if it all gets too messy, refactor!\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing I've done in the past - if I'm extending a class I'll try and follow their conventions. For example, when working with the Spring Framework, I'll have my MVC Controller classes in a package called com.mydomain.myapp.web.servlet.mvc\nIf I'm not extending something I just go with what is simplest. com.mydomain.domain for Domain Objects (although if you have a ton of domain objects this package could get a bit unwieldy).\nFor domain specific constants, I actually put them as public constants in the most related class. For example, if I have a \"Member\" class and have a maximum member name length constant, I put it in the Member class. Some shops make a separate Constants class but I don't see the value in lumping unrelated numbers and strings into a single class. I've seen some other shops try to solve this problem by creating SEPARATE Constants classes, but that just seems like a waste of time and the result is too confusing. Using this setup, a large project with multiple developers will be duplicating constants all over the place.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I like break my classes down into packages that are related to each other.\nFor example:\nModel For database related calls\nView Classes that deal with what you see\nControl Core functionality classes\nUtil Any misc. classes that are used (typically static functions)\netc.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I think keep it simple and don't over think it. Don't over abstract and layer too much. Just keep it neat, and as it grows, refactoring it is trivial. One of the best features of IDEs is refactoring, so why not make use of it and save you brain power for solving problems that are related to your app, rather then meta issues like code organisation.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I'm a huge fan of organized sources, so I always create the following directory structure:\n\nIn /src I'm using the default Java patterns: Package names starting with your domain (org.yourdomain.yourprojectname) and class names reflecting the OOP aspect you're creating with the class (see the other commenters). Common package names like util, model, view, events are useful, too.\nI tend to put constants for a specific topic in an own class, like SessionConstants or ServiceConstants in the same package of the domain classes.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've really come to like Maven's Standard Directory Layout.\nOne of the key ideas for me is to have two source roots - one for production code and one for test code like so:\n\n(here, both src/main/java and src/test/java are source roots).\nAdvantages:\n\nYour tests have package (or \"default\") level access to your classes under test.\nYou can easily package only your production sources into a JAR by dropping src/test/java as a source root.\n\nOne rule of thumb about class placement and packages:\nGenerally speaking, well structured projects will be free of circular dependencies. Learn when they are bad (and when they are not), and consider a tool like JDepend or SonarJ that will help you eliminate them.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "One thing that I found very helpful for unit tests was to have a myApp/src/ and also myApp/test_src/ directories. This way, I can place unit tests in the same packages as the classes they test, and yet I can easily exclude the test cases when I prepare my production installation.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Short answer: draw your system architecture in terms of modules, drawn side-by-side, with each module sliced vertically into layers (e.g. view, model, persistence). Then use a structure like com.mycompany.myapp.somemodule.somelayer, e.g. com.mycompany.myapp.client.view or com.mycompany.myapp.server.model.\nUsing the top level of packages for application modules, in the old-fashioned computer-science sense of modular programming, ought to be obvious. However, on most of the projects I have worked on we end up forgetting to do that, and end up with a mess of packages without that top-level structure. This anti-pattern usually shows itself as a package for something like 'listeners' or 'actions' that groups otherwise unrelated classes simply because they happen to implement the same interface.\nWithin a module, or in a small application, use packages for the application layers. Likely packages include things like the following, depending on the architecture:\n\ncom.mycompany.myapp.view\ncom.mycompany.myapp.model\ncom.mycompany.myapp.services\ncom.mycompany.myapp.rules\ncom.mycompany.myapp.persistence (or 'dao' for data access layer)\ncom.mycompany.myapp.util (beware of this being used as if it were 'misc')\n\nWithin each of these layers, it is natural to group classes by type if there are a lot. A common anti-pattern here is to unnecessarily introduce too many packages and levels of sub-package so that there are only a few classes in each package.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Where I'm working, we're using Maven 2 and we have a pretty nice archetype for our projects. The goal was to obtain a good separation of concerns, thus we defined a project structure using multiple modules (one for each application 'layer'):\n  - common: common code used by the other layers (e.g., i18n)\n  - entities: the domain entities\n  - repositories: this module contains the daos interfaces and implementations\n  - services-intf: interfaces for the services (e.g, UserService, ...) \n  - services-impl: implementations of the services (e.g, UserServiceImpl) \n  - web: everything regarding the web content (e.g., css, jsps, jsf pages, ...)\n  - ws: web services\nEach module has its own dependencies (e.g., repositories could have jpa) and some are project wide (thus they belong in the common module). Dependencies between the different project modules clearly separate things (e.g., the web layer depends on the service layer but doesn't know about the repository layer).\nEach module has its own base package, for example if the application package is \"com.foo.bar\", then we have:\n\nEach module respects the standard maven project structure:\n\nUnit tests for a given layer easily find their place under \\src\\test... Everything that is domain specific has it's place in the entities module. Now something like a FileStorageStrategy should go into the repositories module, since we don't need to know exactly what the implementation is. In the services layer, we only know the repository interface, we do not care what the specific implementation is (separation of concerns).\nThere are multiple advantages to this approach:\n\nclear separation of concerns\neach module is packageable as a jar (or a war in the case of the web module) and thus allows for easier code reuse (e.g., we could install the module in the maven repository and reuse it in another project)\nmaximum independence of each part of the project\n\nI know this doesn't answer all your questions, but I think this could put you on the right path and could prove useful to others.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Searching for some sample code for converting a point in WGS84 coordinate system to a map position in Google Maps (pixel position), also supporting zoom levels. \nIf the codes is well commented, then it can also be in some other language.\nYou can also point me to a open source Java project :)\nSome resources found:\nOpenLayer implementation. \nJOSM project\nExcellent Java Map Projection Library  from JH LABS. This is a pure java PROJ.4 port. Does projection from WGS84 to meters. From there it's quite straightforward to convert meters to tile pixels.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Someone took the javascript code from Google Maps and ported it to python: gmerc.py\nI've used this and it works great.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "GeoTools has code to transform to and from about any coordinate system you could imagine, and among them also Google Map's. It's also open source. However, it should also be pointed out that GeoTools is a large library, so if you're looking something small, quick and easy, it's likely not the way to go.\nI would highly recommend it though if you're going to do other GIS/coordinate transformations, etc. as well.\nIf you use GeoTools or something similar, you might also be interested in knowing that the Google Map coordinate system is called EPSG 3785.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Tile utility code in Java on mapki.com (great resource for google map developers)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "What is the best way to verify/test that a text string is serialized to a byte array with a certain encoding?\nIn my case, I want to verify that an XML structure is serialized to a byte array with the UTF-8 encoding which is of variable character length. As an example, my current ugly procedure is to inject a character known to require two bytes into the structure before serializing, then replacing the two-byte character with an ASCII character and comparing the serialized array lengths. This should yield two serialized arrays where the array containing the two-byte characters should have length +1.\nPlus if the solution is elegant for Java. \nI can't think of any elegant way to seek for a byte sequence in a byte array. (Could be used to seek for a known byte sequence representing the desired character representation in UTF-8.)\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Perhaps you could deserialise the byte array using a known encoding and ensure that (a) it doesn't throw any exceptions, and (b) deserialises to the original string. It seems that from your description of the scenario, you may not have the original string readily available. Might there be a way to create it?\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "That's good.\nYou're right, I don't have the original string, since I'm testing a module that creates an XML document as a byte array. I didn't think about deserializing to a String with an expected encoding. That will do the trick.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I am writing an application in Java for the desktop using the Eclipse SWT library for GUI rendering.  I think SWT helps Java get over the biggest hurdle for acceptance on the desktop: namely providing a Java application with a consistent, responsive interface that looks like that belonging to any other app on your desktop.  However, I feel that packaging an application is still an issue.  \nOS X natively provides an easy mechanism for wrapping Java apps in native application bundles, but producing an app for Windows/Linux that doesn't require the user to run an ugly batch file or click on a .jar is still a hassle.  Possibly that's not such an issue on Linux, where the user is likely to be a little more tech-savvy, but on Windows I'd like to have a regular .exe for him/her to run.\nHas anyone had any experience with any of the .exe generation tools for Java that are out there?  I've tried JSmooth but had various issues with it.  Is there a better solution before I crack out Visual Studio and roll my own?\nEdit:  I should perhaps mention that I am unable to spend a lot of money on a commercial solution.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Install4J. Not free, but worth it. Give the trial a shot\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I went through the same and found that all of the free options weren't very good. Looks like you'll be writing your own. I'd be interested to see if someone has a free/cheap option that works\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Have you thought about Java Web Start?  Here is a tutorial specifically for deploying an SWT application with Java Web Start.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Maybe you should take a look at IzPack. I created a very nice installer some years ago and I'd bet that they are still improving it. It allows the installation of docs, binaries and a clickable link to start the application IIRC.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Have you considered writing a small program in C/C++ that just calls CreateProcess to start up the java VM with the jar (or class) file?\nYou could get Visual C++ Express and put together the startup program pretty easily.  This would make it easy to add a friendly icon as well.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "Another option I was considering: rather than writing a native launcher from scratch, Eclipse comes with the source code for its own launcher, and this could perhaps be repurposed for my app.\nIt's a shame that Sun never included anything similar in the JDK.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "I've used the free Launch4J to create a custom launcher for my Java programs on Windows. Combined with the free NSIS Installer you can build a nice package for your Windows users.\nEdit: Did not see that you use SWT. Don't know if it works with SWT as well, because I used only Swing in my apps.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    },
    {
        "pos": "In my company we use Launch4J to create the exe file, and NSIS to create the installer, with SWT applications. \nWe have used it for years in several commercial applications and the pair works fine.\n",
        "negation_label": 0,
        "error_label": 0,
        "semantic_label": 0
    }
]